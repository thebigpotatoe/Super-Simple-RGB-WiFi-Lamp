// Created by Website/update_website.py
const char websiteSource[] PROGMEM =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "\n"
  "<head>\n"
  "    <meta charset=\"utf-8\">\n"
  "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"
  "    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n"
  "    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">\n"
  "    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n"
  "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\"></script>\n"
  "    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\n"
  "\n"
  "    <script type=\"text/javascript\"\n"
  "        src=\"https://cdnjs.cloudflare.com/ajax/libs/tinyColorPicker/1.1.1/jqColorPicker.min.js\"></script>\n"
  "\n"
  "    <title>RGB WiFi Lamp</title>\n"
  "    <script>\n"
  "        var websock;\n"
  "        var reconnectTimer;\n"
  "\n"
  "        function onStart() {\n"
  "            $(\"#currentModeLabel\").html(\"Connecting to lamp...\")\n"
  "            websock = new WebSocket('ws://' + window.location.hostname + ':81/');\n"
  "            websock.onopen = function (evt) {\n"
  "                console.log('websock opened');\n"
  "            }\n"
  "            websock.onclose = function (evt) {\n"
  "                console.log('websock closed. Reconnecting in 5 seconds');\n"
  "                $(\"#currentModeLabel\").html(\"Lost connection to lamp! Trying to reconnect.\");\n"
  "                if (reconnectTimer) { clearTimeout(reconnectTimer); }\n"
  "                reconnectTimer = setTimeout(function () { onStart(); }, 5000);\n"
  "            }\n"
  "            websock.onerror = function (evt) {\n"
  "                console.log(evt);\n"
  "            }\n"
  "            websock.onmessage = function (evt) {\n"
  "                console.log(\"Incoming Data is: \" + evt.data)\n"
  "                routeMessage(evt.data)\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function routeMessage(jsonString) {\n"
  "            let jsonMessage = JSON.parse(jsonString);\n"
  "            // console.log(jsonMessage)\n"
  "\n"
  "            if (\"Mode\" in jsonMessage) {\n"
  "                // console.log(\"Found Mode Message\")\n"
  "                handleModeMessage(jsonMessage.Mode)\n"
  "            }\n"
  "            if (\"Name\" in jsonMessage) {\n"
  "               // console.log(\"Found Name Message\")\n"
  "               handleNameMessage(jsonMessage.Name)\n"
  "            }\n"
  "            if (\"State\" in jsonMessage) {\n"
  "                // console.log(\"Found State Message\")\n"
  "                handleStateMessage(jsonMessage.State)\n"
  "            }\n"
  "            if (\"Fade Time\" in jsonMessage) {\n"
  "                // console.log(\"Found Fade Time Message\")\n"
  "                handleFadeTimeMessage(jsonMessage[\"Fade Time\"])\n"
  "            }\n"
  "            if (\"Colour\" in jsonMessage) {\n"
  "                // console.log(\"Found Colour Message\")\n"
  "                handleColourMessage(jsonMessage.Colour)\n"
  "            }\n"
  "            if (\"Rainbow\" in jsonMessage) {\n"
  "                // console.log(\"Found Rainbow Message\")\n"
  "                handleRainbowMessage(jsonMessage.Rainbow)\n"
  "            }\n"
  "            if (\"Clock\" in jsonMessage) {\n"
  "                // console.log(\"Found Clock Message\")\n"
  "                handleClockMessage(jsonMessage.Clock)\n"
  "            }\n"
  "            if (\"Bell Curve\" in jsonMessage) {\n"
  "                // console.log(\"Found Bell Curve Message\")\n"
  "                handleBellCurveMessage(jsonMessage[\"Bell Curve\"])\n"
  "            }\n"
  "            if (\"Circle\" in jsonMessage) {\n"
  "                // console.log(\"Found Circle Message\")\n"
  "                handleCircleMessage(jsonMessage[\"Circle\"])\n"
  "            }\n"
  "            if (\"Sparkle\" in jsonMessage) {\n"
  "                // console.log(\"Found Sparkle Message\")\n"
  "                handleSparkleMessage(jsonMessage[\"Sparkle\"])\n"
  "            }\n"
  "            if (\"Color Wipe\" in jsonMessage) {\n"
  "                // console.log(\"Found Color Wipe Message\")\n"
  "                handleColorWipeMessage(jsonMessage[\"Color Wipe\"])\n"
  "            }\n"
  "            if (\"Confetti\" in jsonMessage) {\n"
  "                // console.log(\"Found Confetti Message\")\n"
  "                handleConfettiMessage(jsonMessage[\"Confetti\"])\n"
  "            }\n"
  "            if (\"Night Rider\" in jsonMessage) {\n"
  "                // console.log(\"Found Night Rider Message\")\n"
  "                handleNightRiderMessage(jsonMessage[\"Night Rider\"])\n"
  "            }\n"
  "            if (\"Visualiser\" in jsonMessage) {\n"
  "                // console.log(\"Found Visualiser Message\")\n"
  "                handleVisualiserMessage(jsonMessage[\"Visualiser\"])\n"
  "            }\n"
  "            if (\"Wifi\" in jsonMessage) {\n"
  "                // console.log(\"Found Wifi Message\")\n"
  "                handleWifiMessage(jsonMessage.Wifi)\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleModeMessage(jsonMessage) {\n"
  "            // console.log(jsonMessage)\n"
  "            if (typeof jsonMessage === \"string\") {\n"
  "                $(\"#currentModeLabel\").html(jsonMessage)\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleNameMessage(jsonMessage) {\n"
  "            // console.log(jsonMessage)\n"
  "            if (typeof jsonMessage === \"string\") {\n"
  "                $(\"#NameInput\").val(jsonMessage)\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleStateMessage(jsonMessage) {\n"
  "            // console.log(jsonMessage)\n"
  "            if (typeof jsonMessage === \"boolean\") {\n"
  "                if (jsonMessage) {\n"
  "                    $(\"#stateButton\").val(\"ON\")\n"
  "                    $(\"#stateButton\").html(\"Turn OFF\")\n"
  "                }\n"
  "                else {\n"
  "                    $(\"#stateButton\").val(\"OFF\")\n"
  "                    $(\"#stateButton\").html(\"Turn ON\")\n"
  "                }\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleFadeTimeMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"number\") {\n"
  "                $(\"#fadeTime\").val(jsonMessage)\n"
  "                $(\"#fadeTimeLabel\").html(jsonMessage)\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleColourMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                var newRed = currentRed\n"
  "                var newGreen = currentGreen\n"
  "                var newBlue = currentBlue\n"
  "\n"
  "                if ((\"Red\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Red === \"number\") {\n"
  "                        newRed = jsonMessage.Red\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Green\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Green === \"number\") {\n"
  "                        newGreen = jsonMessage.Green\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Blue\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Blue === \"number\") {\n"
  "                        newBlue = jsonMessage.Blue\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                setPickerColor(colourSelectButton, newRed, newGreen, newBlue);\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleRainbowMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                if ((\"Hue\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Hue === \"number\") {\n"
  "                        $(\"#rainbowHue\").val(Math.round(jsonMessage.Hue / 255 * 360))\n"
  "                        $(\"#rainbowHueLabel\").html(Math.round(jsonMessage.Hue / 255 * 360))\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Speed\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Speed === \"number\") {\n"
  "                        $(\"#rainbowSpeed\").val(jsonMessage.Speed)\n"
  "                        $(\"#rainbowSpeedLabel\").html(jsonMessage.Speed)\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Brightness\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Brightness === \"number\") {\n"
  "                        $(\"#rainbowBrightness\").val(Math.round(jsonMessage.Brightness / 255 * 100))\n"
  "                        $(\"#rainbowBrightnessLabel\").html(Math.round(jsonMessage.Brightness / 255 * 100))\n"
  "                    }\n"
  "                }\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleClockMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                if ((\"hourColour\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.hourColour === \"object\") {\n"
  "                        var newRed = currentHourRed\n"
  "                        var newGreen = currentHourGreen\n"
  "                        var newBlue = currentHourBlue\n"
  "\n"
  "                        if ((\"Red\" in jsonMessage.hourColour)) {\n"
  "                            if (typeof jsonMessage.hourColour.Red === \"number\") {\n"
  "                                newRed = jsonMessage.hourColour.Red\n"
  "                            }\n"
  "                        }\n"
  "                        if ((\"Green\" in jsonMessage.hourColour)) {\n"
  "                            if (typeof jsonMessage.hourColour.Green === \"number\") {\n"
  "                                newGreen = jsonMessage.hourColour.Green\n"
  "                            }\n"
  "                        }\n"
  "                        if ((\"Blue\" in jsonMessage.hourColour)) {\n"
  "                            if (typeof jsonMessage.hourColour.Blue === \"number\") {\n"
  "                                newBlue = jsonMessage.hourColour.Blue\n"
  "                            }\n"
  "                        }\n"
  "\n"
  "                        setPickerColor(clockHourColourButton, newRed, newGreen, newBlue);\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                if ((\"minuteColour\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.minuteColour === \"object\") {\n"
  "                        var newRed = currentMinRed\n"
  "                        var newGreen = currentMinGreen\n"
  "                        var newBlue = currentMinBlue\n"
  "\n"
  "                        if ((\"Red\" in jsonMessage.minuteColour)) {\n"
  "                            if (typeof jsonMessage.minuteColour.Red === \"number\") {\n"
  "                                newRed = jsonMessage.minuteColour.Red\n"
  "                            }\n"
  "                        }\n"
  "                        if ((\"Green\" in jsonMessage.minuteColour)) {\n"
  "                            if (typeof jsonMessage.minuteColour.Green === \"number\") {\n"
  "                                newGreen = jsonMessage.minuteColour.Green\n"
  "                            }\n"
  "                        }\n"
  "                        if ((\"Blue\" in jsonMessage.minuteColour)) {\n"
  "                            if (typeof jsonMessage.minuteColour.Blue === \"number\") {\n"
  "                                newBlue = jsonMessage.minuteColour.Blue\n"
  "                            }\n"
  "                        }\n"
  "\n"
  "                        setPickerColor(clockMinuteColourButton, newRed, newGreen, newBlue);\n"
  "                    }\n"
  "                }\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleBellCurveMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                var newRed = bellRed\n"
  "                var newGreen = bellGreen\n"
  "                var newBlue = bellBlue\n"
  "\n"
  "                if ((\"Red\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Red === \"number\") {\n"
  "                        newRed = jsonMessage.Red\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Green\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Green === \"number\") {\n"
  "                        newGreen = jsonMessage.Green\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Blue\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Blue === \"number\") {\n"
  "                        newBlue = jsonMessage.Blue\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                setPickerColor(bellCurveSelectButton, newRed, newGreen, newBlue);\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleCircleMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleNightRiderMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleSparkleMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                var newRed = currentRed\n"
  "                var newGreen = currentGreen\n"
  "                var newBlue = currentBlue\n"
  "\n"
  "                if ((\"Red\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Red === \"number\") {\n"
  "                        newRed = jsonMessage.Red\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Green\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Green === \"number\") {\n"
  "                        newGreen = jsonMessage.Green\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Blue\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Blue === \"number\") {\n"
  "                        newBlue = jsonMessage.Blue\n"
  "                    }\n"
  "                }\n"
  "                setPickerColor(sparkleSelectButton, newRed, newGreen, newBlue);\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleColorWipeMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                var newRed = currentRed\n"
  "                var newGreen = currentGreen\n"
  "                var newBlue = currentBlue\n"
  "\n"
  "                if ((\"Red\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Red === \"number\") {\n"
  "                        newRed = jsonMessage.Red\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Green\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Green === \"number\") {\n"
  "                        newGreen = jsonMessage.Green\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Blue\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Blue === \"number\") {\n"
  "                        newBlue = jsonMessage.Blue\n"
  "                    }\n"
  "                }\n"
  "                setPickerColor(colorWipeSelectButton, newRed, newGreen, newBlue);\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleConfettiMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                var newRed = currentRed\n"
  "                var newGreen = currentGreen\n"
  "                var newBlue = currentBlue\n"
  "\n"
  "                if ((\"Red\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Red === \"number\") {\n"
  "                        newRed = jsonMessage.Red\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Green\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Green === \"number\") {\n"
  "                        newGreen = jsonMessage.Green\n"
  "                    }\n"
  "                }\n"
  "                if ((\"Blue\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Blue === \"number\") {\n"
  "                        newBlue = jsonMessage.Blue\n"
  "                    }\n"
  "                }\n"
  "                setPickerColor(confettiSelectButton, newRed, newGreen, newBlue);\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleVisualiserMessage(jsonMessage) {\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                if ((\"Period\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.Period === \"number\") {\n"
  "                        $(\"#visualiserPeriod\").val(jsonMessage.Period)\n"
  "                        $(\"#visualiserPeriodLabel\").html(Math.round(1000000 / jsonMessage.Period / 2))\n"
  "                    }\n"
  "                }\n"
  "                if ((\"MinThreshold\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.MinThreshold === \"number\") {\n"
  "                        $(\"#visualiserMinThreshold\").val(jsonMessage.MinThreshold)\n"
  "                        $(\"#visualiserMinThresholdLabel\").html(jsonMessage.MinThreshold)\n"
  "                    }\n"
  "                }\n"
  "                if ((\"MaxThreshold\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.MaxThreshold === \"number\") {\n"
  "                        $(\"#visualiserMaxThreshold\").val(jsonMessage.MaxThreshold)\n"
  "                        $(\"#visualiserMaxThresholdLabel\").html(jsonMessage.MaxThreshold)\n"
  "                    }\n"
  "                }\n"
  "                if ((\"FadeUp\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.FadeUp === \"number\") {\n"
  "                        $(\"#visualiserFadeUp\").val(jsonMessage.FadeUp)\n"
  "                        $(\"#visualiserFadeUpLabel\").html(jsonMessage.FadeUp)\n"
  "                    }\n"
  "                }\n"
  "                if ((\"FadeDown\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.FadeDown === \"number\") {\n"
  "                        $(\"#visualiserFadeDown\").val(jsonMessage.FadeDown)\n"
  "                        $(\"#visualiserFadeDownLabel\").html(jsonMessage.FadeDown)\n"
  "                    }\n"
  "                }\n"
  "                if ((\"HueOffset\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.HueOffset === \"number\") {\n"
  "                        $(\"#visualiserHueOffset\").val(Math.round(jsonMessage.HueOffset / 255 * 360))\n"
  "                        $(\"#visualiserHueOffsetLabel\").html(Math.round(jsonMessage.HueOffset / 255 * 360))\n"
  "                    }\n"
  "                }\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function handleWifiMessage(jsonMessage) {\n"
  "            // {\n"
  "            //     \"Wifi\" : {\n"
  "            //         \"ScanResults\" : [\n"
  "            //             {\n"
  "            //                 \"SSID\" : \"Test\",\n"
  "            //                 \"RSSI\" : -70,\n"
  "            //                 \"BSSID\" : \"MAC\",\n"
  "            //                 \"Channel\" : 1,\n"
  "            //                 \"Encrypt\" : \"Yes\"\n"
  "            //             }\n"
  "            //         ]\n"
  "            //     }\n"
  "            // }\n"
  "\n"
  "            // console.log(jsonMessage)\n"
  "            if (typeof jsonMessage === \"object\") {\n"
  "                if ((\"ScanResults\" in jsonMessage)) {\n"
  "                    if (typeof jsonMessage.ScanResults === \"object\") {\n"
  "                        let specific_tbody = document.getElementById(\"wifiTableBody\");\n"
  "                        for (var i = specific_tbody.rows.length - 1; i > -1; i--) {\n"
  "                            specific_tbody.deleteRow(i);\n"
  "                        }\n"
  "\n"
  "                        for (var i = 0; i < jsonMessage.ScanResults.length; i++) {\n"
  "                            let row = specific_tbody.insertRow(-1);\n"
  "                            let ssidCell = row.insertCell(0).appendChild(document.createTextNode(jsonMessage.ScanResults[i].SSID));\n"
  "                            let rssiCell = row.insertCell(1).appendChild(document.createTextNode(jsonMessage.ScanResults[i].RSSI));\n"
  "                            let bssidCell = row.insertCell(2).appendChild(document.createTextNode(jsonMessage.ScanResults[i].BSSID));\n"
  "                            let channelCell = row.insertCell(3).appendChild(document.createTextNode(jsonMessage.ScanResults[i].CHANNEL));\n"
  "                            let encryptedCell = row.insertCell(4).appendChild(document.createTextNode(jsonMessage.ScanResults[i].ENCRYPT));\n"
  "\n"
  "                            row.addEventListener(\"click\", function () {\n"
  "                                document.getElementById('SSIDInput').value = this.firstChild.innerHTML;\n"
  "                            });\n"
  "                        }\n"
  "                    }\n"
  "                }\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function sendMessage(jsonMessage) {\n"
  "            console.log(\"Sending: \" + JSON.stringify(jsonMessage))\n"
  "            if (websock != null && websock.readyState == 1) {\n"
  "                websock.send(JSON.stringify(jsonMessage));\n"
  "            } else {\n"
  "                console.warn(\"Websockets are closed\")\n"
  "            }\n"
  "        }\n"
  "\n"
  "        function setPickerColor(picker, r, g, b) {\n"
  "            var rgb_color = 'rgb(' + r + ', ' + g + ', ' + b + ')';\n"
  "            picker.val(rgb_color);\n"
  "            picker.colorPicker.color.setColor(rgb_color);\n"
  "            picker.css({\n"
  "                backgroundColor: rgb_color,\n"
  "                color: picker.colorPicker.color.colors.RGBLuminance > 0.22 ? '#222' : '#ddd'\n"
  "            }).text(rgb_color);\n"
  "        }\n"
  "    </script>\n"
  "\n"
  "</head>\n"
  "\n"
  "<body class=\"bg-dark text-light text-justify\" onload=\"javascript:onStart();\">\n"
  "    <nav class=\"navbar navbar-expand-sm bg-secondary navbar-dark fixed-top\" id=\"navbarHeader\">\n"
  "        <div class=\"container-fluid\">\n"
  "            <a class=\"navbar-brand\" href=\"#\" id=\"HomeButton\">RGB WiFi Lamp</a>\n"
  "            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n"
  "                <span class=\"navbar-toggler-icon\"></span>\n"
  "            </button>\n"
  "            <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n"
  "                <ul class=\"nav navbar-nav\">\n"
  "                    <li class=\"nav-item\">\n"
  "                        <a id=\"homeTabNavItem\" class=\"nav-link active\" data-toggle=\"tab\" href=\"#Home\">Home</a>\n"
  "                    </li>\n"
  "                    <li class=\"nav-item\">\n"
  "                        <a id=\"colourTabNavItem\" class=\"nav-link\" data-toggle=\"tab\" href=\"#Colour\">Colour</a>\n"
  "                    </li>\n"
  "                    <li id=\"rainbowTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Rainbow\">Rainbow</a>\n"
  "                    </li>\n"
  "                    <li id=\"clockTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Clock\">Clock</a>\n"
  "                    </li>\n"
  "                    <li id=\"bellCurveTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#BellCurve\">Bell Curve</a>\n"
  "                    </li>\n"
  "                    <li id=\"circleTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Circle\">Circle</a>\n"
  "                    </li>\n"
  "                    <li id=\"nightRiderTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#NightRider\">Night Rider</a>\n"
  "                    </li>\n"
  "                    <li id=\"sparkleTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Sparkle\">Sparkle</a>\n"
  "                    </li>\n"
  "                    <li id=\"colorWipeTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#ColorWipe\">Color Wipe</a>\n"
  "                    </li>\n"
  "                    <li id=\"confettiTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Confetti\">Confetti</a>\n"
  "                    </li>\n"
  "                    <li id=\"visualiserTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Visualiser\">Visualiser</a>\n"
  "                    </li>\n"
  "                    <li id=\"wifiTabNavItem\" class=\"nav-item\">\n"
  "                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#WfiConfig\">Wifi</a>\n"
  "                    </li>\n"
  "                </ul>\n"
  "                <script>\n"
  "                    $(\"#colourTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Colour\" })\n"
  "                    });\n"
  "                    $(\"#rainbowTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Rainbow\" })\n"
  "                    });\n"
  "                    $(\"#clockTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Clock\" })\n"
  "                    });\n"
  "                    $(\"#bellCurveTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Bell Curve\" })\n"
  "                    });\n"
  "                    $(\"#circleTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Circle\" })\n"
  "                    });\n"
  "                    $(\"#nightRiderTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Night Rider\" })\n"
  "                    });\n"
  "                    $(\"#sparkleTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Sparkle\" })\n"
  "                    });\n"
  "                    $(\"#colorWipeTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Color Wipe\" })\n"
  "                    });\n"
  "                    $(\"#confettiTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Confetti\" })\n"
  "                    });\n"
  "                    $(\"#visualiserTabNavItem\").click(function () {\n"
  "                        sendMessage({ \"Mode\": \"Visualiser\" })\n"
  "                    });\n"
  "                </script>\n"
  "            </div>\n"
  "        </div>\n"
  "        <script>\n"
  "            $(function () {\n"
  "                $(\".nav-item\").click(function () {\n"
  "                    $(\".collapse\").collapse('hide');\n"
  "                });\n"
  "            });\n"
  "        </script>\n"
  "    </nav>\n"
  "    <div class=\"tab-content container\" style=\"margin-top:80px\">\n"
  "        <div id=\"modeDisplay\" class=\"container\">\n"
  "            <h1>Mode: <span id=\"currentModeLabel\"></span></h1>\n"
  "            <div class=\"col mb-4\">\n"
  "                <label for=\"fadeTime\">Fade Time: <span id=\"fadeTimeLabel\">200</span> milliseconds</label>\n"
  "                <input id=\"fadeTime\" type=\"range\" min=\"0\" max=\"2000\" step=\"100\" value=\"200\" class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <button id=\"stateButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\" value=\"OFF\">Turn\n"
  "                ON</button>\n"
  "            <script>\n"
  "                fadeTimeDebounce = Date.now()\n"
  "\n"
  "                $(\"#stateButton\").click(function () {\n"
  "                    var newState = $(\"#stateButton\").val() == \"ON\" ? \"OFF\" : \"ON\"\n"
  "                    onStateButtonEvent(newState)\n"
  "                });\n"
  "                $(\"#fadeTime\").on(\"input\", function () {\n"
  "                    onFadeTimeEvent()\n"
  "                });\n"
  "                $(\"#fadeTime\").on(\"change\", function () {\n"
  "                    onFadeTimeEvent()\n"
  "                });\n"
  "\n"
  "                function onStateButtonEvent(currentState) {\n"
  "                    if (currentState != $(\"#stateButton\").val()) {\n"
  "                        if (currentState === \"OFF\") {\n"
  "                            msgValue = false\n"
  "                            $(\"#stateButton\").val(\"OFF\")\n"
  "                            $(\"#stateButton\").html(\"Turn ON\")\n"
  "                        }\n"
  "                        else if (currentState === \"ON\") {\n"
  "                            msgValue = true\n"
  "                            $(\"#stateButton\").val(\"ON\")\n"
  "                            $(\"#stateButton\").html(\"Turn OFF\")\n"
  "                        }\n"
  "\n"
  "                        msg = {\n"
  "                            \"State\": msgValue\n"
  "                        }\n"
  "\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                function onFadeTimeEvent() {\n"
  "                    let currentFadeTimeValue = parseInt($(\"#fadeTime\").val(), 10)\n"
  "                    $(\"#fadeTimeLabel\").html(currentFadeTimeValue)\n"
  "\n"
  "                    msg = {\n"
  "                        \"Fade Time\": currentFadeTimeValue\n"
  "                    }\n"
  "\n"
  "                    if (Date.now() - fadeTimeDebounce > 50) {\n"
  "                        fadeTimeDebounce = Date.now()\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "            </script>\n"
  "            <hr>\n"
  "        </div>\n"
  "        <div id=\"Home\" class=\"container tab-pane active\">\n"
  "            <h1>Home</h1>\n"
  "            <p>Welcome to your RGB WiFi Lamp web page! Here you can change the mode to one of the pre programmed ones\n"
  "                below. Click any of the buttons to interact with the light.</p>\n"
  "            <button id=\"colourButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Colour</button>\n"
  "            <button id=\"rainbowButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Rainbow</button>\n"
  "            <button id=\"clockButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Clock</button>\n"
  "            <button id=\"bellCurveButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Bell\n"
  "                Curve</button>\n"
  "            <button id=\"circleButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Circle</button>\n"
  "            <button id=\"nightRiderButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Night\n"
  "                Rider</button>\n"
  "            <button id=\"sparkleButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Sparkle</button>\n"
  "            <button id=\"colorWipeButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Color\n"
  "                Wipe</button>\n"
  "            <button id=\"confettiButton\" type=\"submit\"\n"
  "                class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Confetti</button>\n"
  "            <button id=\"visualiserButton\" type=\"submit\"\n"
  "                class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Visualiser</button>\n"
  "            <button id=\"wifiButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Wifi\n"
  "                Config</button>\n"
  "            <script>\n"
  "                $(\"#HomeButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Home\"]').tab('show')\n"
  "                });\n"
  "                $(\"#colourButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Colour\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Colour\" })\n"
  "                });\n"
  "                $(\"#rainbowButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Rainbow\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Rainbow\" })\n"
  "                });\n"
  "                $(\"#clockButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Clock\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Clock\" })\n"
  "                });\n"
  "                $(\"#bellCurveButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#BellCurve\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Bell Curve\" })\n"
  "                });\n"
  "                $(\"#circleButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Circle\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Circle\" })\n"
  "                });\n"
  "                $(\"#nightRiderButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#NightRider\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Night Rider\" })\n"
  "                });\n"
  "                $(\"#sparkleButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Sparkle\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Sparkle\" })\n"
  "                });\n"
  "                $(\"#colorWipeButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#ColorWipe\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Color Wipe\" })\n"
  "                });\n"
  "                $(\"#confettiButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Confetti\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Confetti\" })\n"
  "                });\n"
  "                $(\"#visualiserButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#Visualiser\"]').tab('show')\n"
  "                    sendMessage({ \"Mode\": \"Visualiser\" })\n"
  "                });\n"
  "                $(\"#wifiButton\").click(function () {\n"
  "                    $('#navbarHeader a[href=\"#WfiConfig\"]').tab('show')\n"
  "                });\n"
  "            </script>\n"
  "        </div>\n"
  "        <div id=\"Colour\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Colour Mode</h2>\n"
  "            <p>Here you can set the light to any colour you desire. There are also a couple of buttons for setting the\n"
  "                light to different shades of white</p>\n"
  "\n"
  "            <div class=\"row my-3\">\n"
  "                <input id=\"colourSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\"\n"
  "                    value=\"rgb(0,0,0)\"></input>\n"
  "            </div>\n"
  "            <div class=\"row my-3\">\n"
  "                <button id=\"redButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Red</button>\n"
  "                <button id=\"greenButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Green</button>\n"
  "                <button id=\"blueButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Blue</button>\n"
  "            </div>\n"
  "            <div class=\"row my-3\">\n"
  "                <button id=\"yellowButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Yellow</button>\n"
  "                <button id=\"cyanButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Cyan</button>\n"
  "                <button id=\"magentaButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Magenta</button>\n"
  "            </div>\n"
  "            <div class=\"row my-3\">\n"
  "                <button id=\"2500Button\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">2500K</button>\n"
  "                <button id=\"3000Button\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">3000K</button>\n"
  "                <button id=\"4000Button\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">4000K</button>\n"
  "            </div>\n"
  "            <script>\n"
  "                var currentRed = 0;\n"
  "                var currentGreen = 0;\n"
  "                var currentBlue = 0;\n"
  "                var colourDebunce = Date.now()\n"
  "\n"
  "                var colourSelectButton = $('#colourSelectButton').colorPicker({\n"
  "                    customBG: '#222',\n"
  "                    margin: '4px -2px 0',\n"
  "                    doRender: 'div div',\n"
  "                    preventFocus: true,\n"
  "                    animationSpeed: 150,\n"
  "                    forceAlpha: false,\n"
  "\n"
  "                    // demo on how to make plugins... mobile support plugin\n"
  "                    buildCallback: function ($elm) {\n"
  "                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"
  "                    },\n"
  "                    cssAddon:\n"
  "                        '.cp-xy-slider {width:200px; height:200px;}' +\n"
  "                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"
  "                        '.cp-z-slider {height:200px; width:40px;}' +\n"
  "                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"
  "                        '.cp-alpha {height:40px;}' +\n"
  "                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"
  "\n"
  "                    renderCallback: function ($elm, toggled) {\n"
  "                        var colors = this.color.colors;\n"
  "                        onColourButtonEvent(Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                        setPickerColor(colourSelectButton, Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                    }\n"
  "                })\n"
  "                $(\"#redButton\").click(function () {\n"
  "                    onColourButtonEvent(255, 0, 0)\n"
  "                });\n"
  "                $(\"#greenButton\").click(function () {\n"
  "                    onColourButtonEvent(0, 255, 0)\n"
  "                });\n"
  "                $(\"#blueButton\").click(function () {\n"
  "                    onColourButtonEvent(0, 0, 255)\n"
  "                });\n"
  "                $(\"#yellowButton\").click(function () {\n"
  "                    onColourButtonEvent(255, 255, 0)\n"
  "                });\n"
  "                $(\"#cyanButton\").click(function () {\n"
  "                    onColourButtonEvent(0, 255, 255)\n"
  "                });\n"
  "                $(\"#magentaButton\").click(function () {\n"
  "                    onColourButtonEvent(255, 0, 255)\n"
  "                });\n"
  "                $(\"#2500Button\").click(function () {\n"
  "                    onColourButtonEvent(206, 57, 18)\n"
  "                });\n"
  "                $(\"#3000Button\").click(function () {\n"
  "                    onColourButtonEvent(235, 71, 30)\n"
  "                });\n"
  "                $(\"#4000Button\").click(function () {\n"
  "                    onColourButtonEvent(238, 99, 63)\n"
  "                });\n"
  "\n"
  "                function onColourButtonEvent(red, green, blue) {\n"
  "                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"
  "                        currentRed = red\n"
  "                        currentGreen = green\n"
  "                        currentBlue = blue\n"
  "\n"
  "                        msg = {\n"
  "                            \"State\": true,\n"
  "                            \"Mode\": \"Colour\",\n"
  "                            \"Colour\": {\n"
  "                                \"Red\": red,\n"
  "                                \"Green\": green,\n"
  "                                \"Blue\": blue\n"
  "                            }\n"
  "                        }\n"
  "                        if (Date.now() - colourDebunce > 50) {\n"
  "                            colourDebunce = Date.now()\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                    }\n"
  "                }\n"
  "            </Script>\n"
  "        </div>\n"
  "        <div id=\"Rainbow\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Rainbow Mode</h2>\n"
  "            <p>Here you can set the mode to rainbow. This mode produces a rainbow all the way around the light and\n"
  "                slowly shifts the colours clockwise. On this page you can set the speed of this as well as the\n"
  "                brightness of the light</p>\n"
  "            <div>\n"
  "                <label for=\"rainbowHue\">Start Hue: <span id=\"rainbowHueLabel\">0</span> Degrees</label>\n"
  "                <input id=\"rainbowHue\" type=\"range\" min=\"0\" max=\"359\" step=\"1\" value=\"0\" class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <div>\n"
  "                <label for=\"rainbowBrightness\">Rainbow Brightness: <span id=\"rainbowBrightnessLabel\">100</span>%</label>\n"
  "                <input id=\"rainbowBrightness\" type=\"range\" min=\"0\" max=\"100\" step=\"1\" value=\"100\"\n"
  "                    class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <div>\n"
  "                <label for=\"rainbowSpeed\">Rainbow Speed: <span id=\"rainbowSpeedLabel\">10</span> seconds</label>\n"
  "                <input id=\"rainbowSpeed\" type=\"range\" min=\"0\" max=\"10\" step=\"1\" value=\"10\" class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <script>\n"
  "                var rainbowDebunce = Date.now()\n"
  "                var rainbowLastMessage = \"\"\n"
  "\n"
  "                $(\"#rainbowHue\").on(\"input\", function () {\n"
  "                    onRainboWHueEvent()\n"
  "                });\n"
  "                $(\"#rainbowHue\").on(\"change\", function () {\n"
  "                    onRainboWHueEvent()\n"
  "                });\n"
  "                $(\"#rainbowSpeed\").on(\"input\", function () {\n"
  "                    onRainboWEvent()\n"
  "                });\n"
  "                $(\"#rainbowSpeed\").on(\"change\", function () {\n"
  "                    onRainboWEvent()\n"
  "                });\n"
  "                $(\"#rainbowBrightness\").on(\"input\", function () {\n"
  "                    onRainboWEvent()\n"
  "                });\n"
  "                $(\"#rainbowBrightness\").on(\"change\", function () {\n"
  "                    onRainboWEvent()\n"
  "                });\n"
  "\n"
  "                function onRainboWHueEvent() {\n"
  "\n"
  "                    let currentHueValue = parseInt($(\"#rainbowHue\").val(), 10)\n"
  "                    let currentBrightnessValue = parseInt($(\"#rainbowBrightness\").val(), 10)\n"
  "\n"
  "                    $(\"#rainbowSpeed\").val = 0;\n"
  "                    $(\"#rainbowSpeedLabel\").html(0)\n"
  "                    $(\"#rainbowHueLabel\").html(currentHueValue)\n"
  "                    $(\"#rainbowBrightnessLabel\").html(currentBrightnessValue)\n"
  "\n"
  "                    msg = {\n"
  "                        \"State\": true,\n"
  "                        \"Mode\": \"Rainbow\",\n"
  "                        \"Rainbow\": {\n"
  "                            \"Hue\": Math.round(currentHueValue / 360 * 255),\n"
  "                            \"Speed\": 0,\n"
  "                            \"Brightness\": Math.round(currentBrightnessValue / 100 * 255)\n"
  "                        }\n"
  "                    }\n"
  "\n"
  "                    if (msg != rainbowLastMessage && Date.now() - rainbowDebunce > 50) {\n"
  "                        rainbowDebunce = Date.now()\n"
  "                        rainbowLastMessage = msg\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                function onRainboWEvent() {\n"
  "                    let currentSpeedValue = parseFloat($(\"#rainbowSpeed\").val())\n"
  "                    let currentBrightnessValue = parseInt($(\"#rainbowBrightness\").val(), 10)\n"
  "\n"
  "                    $(\"#rainbowSpeedLabel\").html(currentSpeedValue)\n"
  "                    $(\"#rainbowBrightnessLabel\").html(currentBrightnessValue)\n"
  "\n"
  "                    msg = {\n"
  "                        \"State\": true,\n"
  "                        \"Mode\": \"Rainbow\",\n"
  "                        \"Rainbow\": {\n"
  "                            \"Speed\": currentSpeedValue,\n"
  "                            \"Brightness\": Math.round(currentBrightnessValue / 100 * 255)\n"
  "                        }\n"
  "                    }\n"
  "\n"
  "                    if (msg != rainbowLastMessage && Date.now() - rainbowDebunce > 50) {\n"
  "                        rainbowDebunce = Date.now()\n"
  "                        rainbowLastMessage = msg\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "            </script>\n"
  "        </div>\n"
  "        <div id=\"Clock\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Clock Mode</h2>\n"
  "            <p>In this mode the light will display the current time in 12 hr format uisng the\n"
  "                top and bottom side of the light. On the top is the current hour, and the bottom is the minute. The left\n"
  "                of teh light represents 0 and the right represents either 12hr or 60mins. You can choose the colour of\n"
  "                the hour and minute light to what you would desire. If your clock is out of sync\n"
  "                you can click the resync button (note this should be automatically done on the device for you)</p>\n"
  "            <h2>Current Time: <span id=\"clockPrintOut\"></span></h2>\n"
  "            <div class=\"row my-3\">\n"
  "                <button id=\"clockHourColourButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\">Hour\n"
  "                    Colour</button>\n"
  "                <button id=\"clockMinuteColourButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\">Minute\n"
  "                    Colour</button>\n"
  "            </div>\n"
  "\n"
  "            <script>\n"
  "                clockHourDebunce = Date.now()\n"
  "                clockMinDebunce = Date.now()\n"
  "                var currentHourRed = 0\n"
  "                var currentHourGreen = 0\n"
  "                var currentHourBlue = 0\n"
  "                var currentMinRed = 0\n"
  "                var currentMinGreen = 0\n"
  "                var currentMinBlue = 0\n"
  "\n"
  "                var clockHourColourButton = $('#clockHourColourButton').colorPicker({\n"
  "                    customBG: '#222',\n"
  "                    margin: '4px -2px 0',\n"
  "                    doRender: 'div div',\n"
  "                    preventFocus: true,\n"
  "                    animationSpeed: 150,\n"
  "                    forceAlpha: false,\n"
  "\n"
  "                    // demo on how to make plugins... mobile support plugin\n"
  "                    buildCallback: function ($elm) {\n"
  "                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"
  "                    },\n"
  "                    cssAddon:\n"
  "                        '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"
  "                        '.cp-xy-slider {width:200px; height:200px;}' +\n"
  "                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"
  "                        '.cp-z-slider {height:200px; width:40px;}' +\n"
  "                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"
  "                        '.cp-alpha {height:40px;}' +\n"
  "                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"
  "\n"
  "                    renderCallback: function ($elm, toggled) {\n"
  "                        var colors = this.color.colors;\n"
  "                        onHourPickerEvent(Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                        setPickerColor(clockHourColourButton, Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                    }\n"
  "                })\n"
  "                var clockMinuteColourButton = $('#clockMinuteColourButton').colorPicker({\n"
  "                    customBG: '#222',\n"
  "                    margin: '4px -2px 0',\n"
  "                    doRender: 'div div',\n"
  "                    preventFocus: true,\n"
  "                    animationSpeed: 150,\n"
  "                    forceAlpha: false,\n"
  "\n"
  "                    // demo on how to make plugins... mobile support plugin\n"
  "                    buildCallback: function ($elm) {\n"
  "                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"
  "                    },\n"
  "                    cssAddon:\n"
  "                        '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"
  "                        '.cp-xy-slider {width:200px; height:200px;}' +\n"
  "                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"
  "                        '.cp-z-slider {height:200px; width:40px;}' +\n"
  "                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"
  "                        '.cp-alpha {height:40px;}' +\n"
  "                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"
  "\n"
  "                    renderCallback: function ($elm, toggled) {\n"
  "                        var colors = this.color.colors;\n"
  "                        onMinPickerEvent(Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                        setPickerColor(clockMinuteColourButton, Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                    }\n"
  "                })\n"
  "\n"
  "                $(function () {\n"
  "                    clockTick()\n"
  "                });\n"
  "\n"
  "                function clockTick() {\n"
  "                    let today = new Date();\n"
  "                    let h = (today.getHours() % 12 < 10) ? \"0\" + today.getHours() % 12 : today.getHours() % 12\n"
  "                    let m = (today.getMinutes() < 10) ? \"0\" + today.getMinutes() : today.getMinutes()\n"
  "                    let s = (today.getSeconds() < 10) ? \"0\" + today.getSeconds() : today.getSeconds()\n"
  "                    let ampm = (today.getHours() >= 12) ? 'PM' : 'AM';\n"
  "                    h = (today.getHours() != 0) ? h : \"12\";\n"
  "\n"
  "                    var t = setTimeout(clockTick, 1000);\n"
  "                    $(\"#clockPrintOut\").html(h + \":\" + m + \":\" + s + \" \" + ampm)\n"
  "                }\n"
  "\n"
  "                function onHourPickerEvent(red, green, blue) {\n"
  "                    if (currentHourRed != red || currentHourGreen != green || currentHourBlue != blue) {\n"
  "                        currentHourRed = red\n"
  "                        currentHourGreen = green\n"
  "                        currentHourBlue = blue\n"
  "\n"
  "                        msg = {\n"
  "                            \"State\": true,\n"
  "                            \"Mode\": \"Clock\",\n"
  "                            \"Clock\": {\n"
  "                                \"hourColour\": {\n"
  "                                    \"Red\": red,\n"
  "                                    \"Green\": green,\n"
  "                                    \"Blue\": blue\n"
  "                                }\n"
  "                            }\n"
  "                        }\n"
  "\n"
  "                        if (Date.now() - clockHourDebunce > 50) {\n"
  "                            clockHourDebunce = Date.now()\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                function onMinPickerEvent(red, green, blue) {\n"
  "                    if (currentMinRed != red || currentMinGreen != green || currentMinBlue != blue) {\n"
  "                        currentMinRed = red\n"
  "                        currentMinGreen = green\n"
  "                        currentMinBlue = blue\n"
  "\n"
  "                        msg = {\n"
  "                            \"State\": true,\n"
  "                            \"Mode\": \"Clock\",\n"
  "                            \"Clock\": {\n"
  "                                \"minColour\": {\n"
  "                                    \"Red\": red,\n"
  "                                    \"Green\": green,\n"
  "                                    \"Blue\": blue\n"
  "                                }\n"
  "                            }\n"
  "                        }\n"
  "\n"
  "                        if (Date.now() - clockMinDebunce > 50) {\n"
  "                            clockMinDebunce = Date.now()\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                    }\n"
  "                }\n"
  "            </script>\n"
  "\n"
  "        </div>\n"
  "        <div id=\"BellCurve\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Bell Curve Mode</h2>\n"
  "            <p>In this mode the lamp will shape the light into a bell curve. This is meant to be more asthetically\n"
  "                pleasing than the regular colour mode.</p>\n"
  "            <div class=\"row my-3\">\n"
  "                <input id=\"bellCurveSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\"\n"
  "                    value=\"rgb(0,0,0)\">\n"
  "            </div>\n"
  "            <script>\n"
  "                bellCurveDebunce = Date.now()\n"
  "                var bellRed = 0\n"
  "                var bellGreen = 0\n"
  "                var bellBlue = 0\n"
  "\n"
  "                var bellCurveSelectButton = $('#bellCurveSelectButton').colorPicker({\n"
  "                    customBG: '#222',\n"
  "                    margin: '4px -2px 0',\n"
  "                    doRender: 'div div',\n"
  "                    preventFocus: true,\n"
  "                    animationSpeed: 150,\n"
  "                    forceAlpha: false,\n"
  "\n"
  "                    // demo on how to make plugins... mobile support plugin\n"
  "                    buildCallback: function ($elm) {\n"
  "                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"
  "                    },\n"
  "                    cssAddon:\n"
  "                        '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"
  "                        '.cp-xy-slider {width:200px; height:200px;}' +\n"
  "                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"
  "                        '.cp-z-slider {height:200px; width:40px;}' +\n"
  "                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"
  "                        '.cp-alpha {height:40px;}' +\n"
  "                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"
  "\n"
  "                    renderCallback: function ($elm, toggled) {\n"
  "                        var colors = this.color.colors;\n"
  "                        onOnBellCurvePickerEvent(Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                        setPickerColor(bellCurveSelectButton, Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                    }\n"
  "                })\n"
  "\n"
  "                function onOnBellCurvePickerEvent(red, green, blue) {\n"
  "                    if (bellRed != red || bellGreen != green || bellBlue != blue) {\n"
  "                        msg = {\n"
  "                            \"State\": true,\n"
  "                            \"Mode\": \"Bell Curve\",\n"
  "                            \"Bell Curve\": {\n"
  "                                \"Red\": red,\n"
  "                                \"Green\": green,\n"
  "                                \"Blue\": blue\n"
  "                            }\n"
  "                        }\n"
  "\n"
  "                        if (Date.now() - bellCurveDebunce > 50) {\n"
  "                            bellCurveDebunce = Date.now()\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                    }\n"
  "                }\n"
  "\n"
  "            </script>\n"
  "        </div>\n"
  "        <div id=\"Circle\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Circle Mode</h2>\n"
  "            <p>A simple dot moving round the lamp.\n"
  "        </div>\n"
  "        <div id=\"NightRider\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Night Rider Mode</h2>\n"
  "            <p>Knight Rider. A shadowy flight into the dangerous world of a man who does not exist.\n"
  "                Michael Knight: a young loner on a crusade to champion the cause of the innocent,\n"
  "                the helpless, the powerless, in a world of criminals who operate above the law.</p>\n"
  "        </div>\n"
  "        <div id=\"Sparkle\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Sparkle Mode</h2>\n"
  "            <p>This is the Sparkle mode..</p>\n"
  "            <div class=\"row my-3\">\n"
  "                <input id=\"sparkleSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\"\n"
  "                    value=\"rgb(0,0,0)\"></input>\n"
  "            </div>\n"
  "            <script>\n"
  "                var sparkleLastMessage = \"\"\n"
  "                $(\"#sparkleSpeed\").on(\"input\", function () {\n"
  "                    onSparkleEvent()\n"
  "                });\n"
  "                $(\"#sparkleSpeed\").on(\"change\", function () {\n"
  "                    onSparkleEvent()\n"
  "                });\n"
  "                var sparkleRed = 0;\n"
  "                var sparkleGreen = 0;\n"
  "                var sparkleBlue = 0;\n"
  "                var sparkleDebunce = Date.now()\n"
  "\n"
  "                var sparkleSelectButton = $('#sparkleSelectButton').colorPicker({\n"
  "                    customBG: '#222',\n"
  "                    margin: '4px -2px 0',\n"
  "                    doRender: 'div div',\n"
  "                    preventFocus: true,\n"
  "                    animationSpeed: 150,\n"
  "                    forceAlpha: false,\n"
  "\n"
  "                    // demo on how to make plugins... mobile support plugin\n"
  "                    buildCallback: function ($elm) {\n"
  "                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"
  "                    },\n"
  "                    cssAddon:\n"
  "                        '.cp-xy-slider {width:200px; height:200px;}' +\n"
  "                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"
  "                        '.cp-z-slider {height:200px; width:40px;}' +\n"
  "                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"
  "                        '.cp-alpha {height:40px;}' +\n"
  "                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"
  "\n"
  "                    renderCallback: function ($elm, toggled) {\n"
  "                        var colors = this.color.colors;\n"
  "                        onSparkleButtonEvent(Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                        setPickerColor(sparkleSelectButton, Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                    }\n"
  "                })\n"
  "\n"
  "                function onSparkleEvent() {\n"
  "                    let currentSpeedValue = parseFloat($(\"#sparkleSpeed\").val())\n"
  "\n"
  "                    $(\"#sparkleSpeedLabel\").html(currentSpeedValue)\n"
  "\n"
  "                    msg = {\n"
  "                        \"State\": true,\n"
  "                        \"Mode\": \"Sparkle\",\n"
  "                        \"Sparkle\": {\n"
  "                            \"Speed\": currentSpeedValue,\n"
  "                        }\n"
  "                    }\n"
  "\n"
  "                    if (msg != sparkleLastMessage && Date.now() - sparkleDebunce > 50) {\n"
  "                        sparkleDebunce = Date.now()\n"
  "                        sparkleLastMessage = msg\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                function onSparkleButtonEvent(red, green, blue) {\n"
  "                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"
  "                        currentRed = red\n"
  "                        currentGreen = green\n"
  "                        currentBlue = blue\n"
  "\n"
  "                        msg = {\n"
  "                            \"State\": true,\n"
  "                            \"Mode\": \"Sparkle\",\n"
  "                            \"Sparkle\": {\n"
  "                                \"Red\": red,\n"
  "                                \"Green\": green,\n"
  "                                \"Blue\": blue\n"
  "                            }\n"
  "                        }\n"
  "                        if (Date.now() - sparkleDebunce > 50) {\n"
  "                            sparkleDebunce = Date.now()\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                    }\n"
  "                    if (msg != sparkleLastMessage && Date.now() - sparkleDebunce > 50) {\n"
  "                        sparkleDebunce = Date.now()\n"
  "                        sparkleLastMessage = msg\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "\n"
  "            </Script>\n"
  "        </div>\n"
  "        <div id=\"ColorWipe\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Color Wipe Mode</h2>\n"
  "            <p>Color Wipe will fill the light with a color in a wiping fashion then wipe the light away.</p>\n"
  "            <div class=\"row my-3\">\n"
  "                <input id=\"colorWipeSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\"\n"
  "                    value=\"rgb(0,0,0)\"></input>\n"
  "            </div>\n"
  "            <script>\n"
  "                var colorWipeLastMessage = \"\"\n"
  "                var colorWipeRed = 0\n"
  "                var colorWipeGreen = 0\n"
  "                var colorWipeBlue = 0\n"
  "                var colorWipeDebunce = Date.now()\n"
  "\n"
  "                var colorWipeSelectButton = $('#colorWipeSelectButton').colorPicker({\n"
  "                    customBG: '#222',\n"
  "                    margin: '4px -2px 0',\n"
  "                    doRender: 'div div',\n"
  "                    preventFocus: true,\n"
  "                    animationSpeed: 150,\n"
  "                    forceAlpha: false,\n"
  "\n"
  "                    // demo on how to make plugins... mobile support plugin\n"
  "                    buildCallback: function ($elm) {\n"
  "                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"
  "                    },\n"
  "                    cssAddon:\n"
  "                        '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"
  "                        '.cp-xy-slider {width:200px; height:200px;}' +\n"
  "                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"
  "                        '.cp-z-slider {height:200px; width:40px;}' +\n"
  "                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"
  "                        '.cp-alpha {height:40px;}' +\n"
  "                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"
  "\n"
  "                    renderCallback: function ($elm, toggled) {\n"
  "                        var colors = this.color.colors;\n"
  "                        onColorWipeButtonEvent(Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "\n"
  "                        setPickerColor(colorWipeSelectButton, Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                    }\n"
  "                })\n"
  "\n"
  "                function onColorWipeButtonEvent(red, green, blue) {\n"
  "                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"
  "                        currentRed = red\n"
  "                        currentGreen = green\n"
  "                        currentBlue = blue\n"
  "\n"
  "                        msg = {\n"
  "                            \"State\": true,\n"
  "                            \"Mode\": \"Color Wipe\",\n"
  "                            \"Color Wipe\": {\n"
  "                                \"Red\": red,\n"
  "                                \"Green\": green,\n"
  "                                \"Blue\": blue\n"
  "                            }\n"
  "                        }\n"
  "\n"
  "                        if (Date.now() - colorWipeDebunce > 50) {\n"
  "                            colorWipeDebunce = Date.now()\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                        if (msg != colorWipeLastMessage && Date.now() - colorWipeDebunce > 50) {\n"
  "                            colorWipeDebunce = Date.now()\n"
  "                            colorWipeLastMessage = msg\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                    }\n"
  "                }\n"
  "\n"
  "            </script>\n"
  "        </div>\n"
  "        <div id=\"Confetti\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Confetti Mode</h2>\n"
  "            <p>Confetti will flash random colors to emulate confetti.</p>\n"
  "            <script>\n"
  "                var confettiLastMessage = \"\"\n"
  "                var confettiRed = 0;\n"
  "                var confettiGreen = 0;\n"
  "                var confettiBlue = 0;\n"
  "                var confettiDebunce = Date.now()\n"
  "\n"
  "                var confettiSelectButton = $('#confettiSelectButton').colorPicker({\n"
  "                    customBG: '#222',\n"
  "                    margin: '4px -2px 0',\n"
  "                    doRender: 'div div',\n"
  "                    preventFocus: true,\n"
  "                    animationSpeed: 150,\n"
  "                    forceAlpha: false,\n"
  "\n"
  "                    // demo on how to make plugins... mobile support plugin\n"
  "                    buildCallback: function ($elm) {\n"
  "                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"
  "                    },\n"
  "                    cssAddon:\n"
  "                        '.cp-xy-slider {width:200px; height:200px;}' +\n"
  "                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"
  "                        '.cp-z-slider {height:200px; width:40px;}' +\n"
  "                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"
  "                        '.cp-alpha {height:40px;}' +\n"
  "                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"
  "\n"
  "                    renderCallback: function ($elm, toggled) {\n"
  "                        var colors = this.color.colors;\n"
  "                        onConfettiButtonEvent(Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                        setPickerColor(confettiSelectButton, Math.round(colors.rgb.r * 255), Math.round(colors.rgb.g * 255), Math.round(colors.rgb.b * 255))\n"
  "                    }\n"
  "                })\n"
  "\n"
  "                function onConfettiEvent() {\n"
  "                    let currentSpeedValue = parseFloat($(\"#confettiSpeed\").val())\n"
  "\n"
  "                    $(\"#confettiSpeedLabel\").html(currentSpeedValue)\n"
  "\n"
  "                    msg = {\n"
  "                        \"State\": true,\n"
  "                        \"Mode\": \"Confetti\",\n"
  "                        \"Confetti\": {\n"
  "                            \"Speed\": currentSpeedValue,\n"
  "                        }\n"
  "                    }\n"
  "\n"
  "                    if (msg != confettiLastMessage && Date.now() - confettiDebunce > 50) {\n"
  "                        confettiDebunce = Date.now()\n"
  "                        confettiLastMessage = msg\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                function onConfettiButtonEvent(red, green, blue) {\n"
  "                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"
  "                        currentRed = red\n"
  "                        currentGreen = green\n"
  "                        currentBlue = blue\n"
  "\n"
  "                        msg = {\n"
  "                            \"State\": true,\n"
  "                            \"Mode\": \"Confetti\",\n"
  "                            \"Confetti\": {\n"
  "                                \"Red\": red,\n"
  "                                \"Green\": green,\n"
  "                                \"Blue\": blue\n"
  "                            }\n"
  "                        }\n"
  "                        if (Date.now() - confettiDebunce > 50) {\n"
  "                            confettiDebunce = Date.now()\n"
  "                            sendMessage(msg)\n"
  "                        }\n"
  "                    }\n"
  "                    if (msg != confettiLastMessage && Date.now() - confettiDebunce > 50) {\n"
  "                        confettiDebunce = Date.now()\n"
  "                        confettiLastMessage = msg\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "            </Script>\n"
  "        </div>\n"
  "        <div id=\"Visualiser\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Visualiser Mode</h2>\n"
  "            <p> Here you can set the mode to Visualiser. This mode does an FFT on the ADC of the ESP8266 and maps the\n"
  "                frequencies\n"
  "                to the number of top and bottom LED's. To use this mode, an input source must be present on the ADC such\n"
  "                as an amplified mic\n"
  "                or an input from a music source such as a Chromecast.\n"
  "            </p>\n"
  "            <div>\n"
  "                <label for=\"visualiserPeriod\"><b>Frequency Range</b>: <span\n"
  "                        id=\"visualiserPeriodLabel\">2000</span>Hz</label>\n"
  "                <input id=\"visualiserPeriod\" type=\"range\" min=\"100\" max=\"2000\" step=\"50\" value=\"250\"\n"
  "                    class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <div>\n"
  "                <label for=\"visualiserMinThreshold\"><b>Minimum Threshold</b>: <span\n"
  "                        id=\"visualiserMinThresholdLabel\">100</span></label>\n"
  "                <input id=\"visualiserMinThreshold\" type=\"range\" min=\"0\" max=\"300\" step=\"10\" value=\"100\"\n"
  "                    class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <div>\n"
  "                <label for=\"visualiserMaxThreshold\"><b>Maximum Threshold</b>: <span\n"
  "                        id=\"visualiserMaxThresholdLabel\">750</span></label>\n"
  "                <input id=\"visualiserMaxThreshold\" type=\"range\" min=\"400\" max=\"3000\" step=\"50\" value=\"750\"\n"
  "                    class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <div>\n"
  "                <label for=\"visualiserFadeUp\"><b>Fade Up Delay</b>: <span id=\"visualiserFadeUpLabel\">32</span></label>\n"
  "                <input id=\"visualiserFadeUp\" type=\"range\" min=\"0\" max=\"255\" step=\"1\" value=\"32\"\n"
  "                    class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <div>\n"
  "                <label for=\"visualiserFadeDown\"><b>Fade Down Delay</b>: <span\n"
  "                        id=\"visualiserFadeDownLabel\">32</span></label>\n"
  "                <input id=\"visualiserFadeDown\" type=\"range\" min=\"0\" max=\"255\" step=\"1\" value=\"32\"\n"
  "                    class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <div>\n"
  "                <label for=\"visualiserHueOffset\"><b>Hue Offset</b>: <span\n"
  "                        id=\"visualiserHueOffsetLabel\">170</span></label>\n"
  "                <input id=\"visualiserHueOffset\" type=\"range\" min=\"0\" max=\"359\" step=\"1\" value=\"170\"\n"
  "                    class=\"form-control-range custom-range\">\n"
  "            </div>\n"
  "            <h6 class=\"pt-4\">Variable Description</h6>\n"
  "            <ul>\n"
  "                <li><b>Frequency Range</b> - The displayed frequency spectrum from left to right starting from 0Hz</li>\n"
  "                <li><b>Minimum Threshold</b> - The minimum value of the FFT calculations to map to the zero brightness\n"
  "                    of the LED's, useful to remove noise</li>\n"
  "                <li><b>Maximum Threshold</b> - The maximum ceiling value value of the FFT to map to max brightness of\n"
  "                    the LED's</li>\n"
  "                <li><b>Fade Up Delay</b> - A multiplier to control the speed of animation when setting the light to new\n"
  "                    brightness</li>\n"
  "                <li><b>Fade Down Delay</b> - A multiplier to control how fast the LED's fade out when no new brightness\n"
  "                    has been set</li>\n"
  "                <li><b>Hue Offset</b> - The offset hue value from 0 for the start of the rainbow</li>\n"
  "            </ul>\n"
  "\n"
  "            <script>\n"
  "                var visualiserDebunce = Date.now()\n"
  "                var lastVisualiserMessaeg = \"\"\n"
  "\n"
  "                $(\"#visualiserPeriod\").on(\"input\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserPeriod\").on(\"change\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserMinThreshold\").on(\"input\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserMinThreshold\").on(\"change\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserMaxThreshold\").on(\"input\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserMaxThreshold\").on(\"change\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserFadeUp\").on(\"input\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserFadeUp\").on(\"change\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserFadeDown\").on(\"input\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserFadeDown\").on(\"change\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserHueOffset\").on(\"input\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "                $(\"#visualiserHueOffset\").on(\"change\", function () {\n"
  "                    onVisualiserEvent()\n"
  "                });\n"
  "\n"
  "                function onVisualiserEvent() {\n"
  "                    let currentPeriod = parseInt($(\"#visualiserPeriod\").val(), 10)\n"
  "                    let currentMinThreshold = parseInt($(\"#visualiserMinThreshold\").val(), 10)\n"
  "                    let currentMaxThreshold = parseInt($(\"#visualiserMaxThreshold\").val(), 10)\n"
  "                    let currentFadeUp = parseInt($(\"#visualiserFadeUp\").val(), 10)\n"
  "                    let currentFadeDown = parseInt($(\"#visualiserFadeDown\").val(), 10)\n"
  "                    let currentHueOffset = parseInt($(\"#visualiserHueOffset\").val(), 10)\n"
  "\n"
  "                    $(\"#visualiserPeriodLabel\").html(Math.round(1000000 / currentPeriod / 2))\n"
  "                    $(\"#visualiserMinThresholdLabel\").html(currentMinThreshold)\n"
  "                    $(\"#visualiserMaxThresholdLabel\").html(currentMaxThreshold)\n"
  "                    $(\"#visualiserFadeUpLabel\").html(currentFadeUp)\n"
  "                    $(\"#visualiserFadeDownLabel\").html(currentFadeDown)\n"
  "                    $(\"#visualiserHueOffsetLabel\").html(currentHueOffset)\n"
  "\n"
  "                    msg = {\n"
  "                        \"State\": true,\n"
  "                        \"Mode\": \"Visualiser\",\n"
  "                        \"Visualiser\": {\n"
  "                            \"Period\": currentPeriod,\n"
  "                            \"MinThreshold\": currentMinThreshold,\n"
  "                            \"MaxThreshold\": currentMaxThreshold,\n"
  "                            \"FadeUp\": currentFadeUp,\n"
  "                            \"FadeDown\": currentFadeDown,\n"
  "                            \"HueOffset\": Math.round(currentHueOffset / 360 * 255)\n"
  "                        }\n"
  "                    }\n"
  "\n"
  "                    if (msg != lastVisualiserMessaeg && Date.now() - visualiserDebunce > 50) {\n"
  "                        lastVisualiserMessaeg = msg\n"
  "                        visualiserDebunce = Date.now()\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "            </script>\n"
  "        </div>\n"
  "        <div id=\"WfiConfig\" class=\"container pb-5 tab-pane fade\">\n"
  "            <h2>Wifi Configuration</h2>\n"
  "            <p>This is the WiFi configuration page. Here you can choose the wifi access point to connect to or go back\n"
  "                to access point mode. This will be remebered through reboot for you so you wont have to set this up\n"
  "                every time. <b>Please allow a few seconds for this page to update the table.</b> </p>\n"
  "            <table class=\"table table-hover\">\n"
  "                <thead id=\"wifiTableHead\">\n"
  "                    <tr>\n"
  "                        <th>SSID</th>\n"
  "                        <th>RSSI</th>\n"
  "                        <th>BSSID</th>\n"
  "                        <th>Channel</th>\n"
  "                        <th>Encrypted</th>\n"
  "                    </tr>\n"
  "                </thead>\n"
  "                <tbody id=\"wifiTableBody\">\n"
  "                </tbody>\n"
  "            </table>\n"
  "\n"
  "            <button id=\"rescanButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Rescan</button>\n"
  "\n"
  "            <div id=\"wifiConfigForm\">\n"
  "                <div class=\"form-group\">\n"
  "                    <label for=\"NameInput\">Name</label>\n"
  "                    <input id=\"NameInput\" class=\"form-control\" placeholder=\"Name\" type=\"text\">\n"
  "                </div>\n"
  "                <div class=\"form-group\">\n"
  "                    <label for=\"SSIDInput\">SSID</label>\n"
  "                    <input id=\"SSIDInput\" class=\"form-control\" placeholder=\"SSID\" type=\"text\">\n"
  "                </div>\n"
  "                <div class=\"form-group\">\n"
  "                    <label for=\"PassInput\">Password</label>\n"
  "                    <input id=\"PassInput\" class=\"form-control\" placeholder=\"Password\" type=\"text\">\n"
  "                </div>\n"
  "                <button id=\"wifiConfigSubmitButton\" type=\"submit\" class=\"btn btn-lg btn-outline-light\">Submit</button>\n"
  "            </div>\n"
  "\n"
  "            <script>\n"
  "                wifiDebounce = Date.now()\n"
  "\n"
  "                $(\"#rescanButton\").click(function () {\n"
  "                    onRescanWifiEvent()\n"
  "                });\n"
  "                $(\"#wifiConfigSubmitButton\").click(function () {\n"
  "                    onSubmitWifiEvent()\n"
  "                });\n"
  "\n"
  "                function onRescanWifiEvent() {\n"
  "                    msg = {\n"
  "                        \"Wifi\": {\n"
  "                            \"Rescan\": true\n"
  "                        }\n"
  "                    }\n"
  "\n"
  "                    if (Date.now() - wifiDebounce > 2000) {\n"
  "                        wifiDebounce = Date.now()\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "\n"
  "                function onSubmitWifiEvent() {\n"
  "                    msg = {\n"
  "                        \"Name\": $(\"#NameInput\").val(),\n"
  "                        \"Wifi\": {\n"
  "                            \"SSID\": $(\"#SSIDInput\").val(),\n"
  "                            \"Password\": $(\"#PassInput\").val()\n"
  "                        }\n"
  "                    }\n"
  "\n"
  "                    $(\"#SSIDInput\").val(\"\")\n"
  "                    $(\"#PassInput\").val(\"\")\n"
  "\n"
  "                    if (Date.now() - wifiDebounce > 2000) {\n"
  "                        wifiDebounce = Date.now()\n"
  "                        sendMessage(msg)\n"
  "                    }\n"
  "                }\n"
  "            </script>\n"
  "        </div>\n"
  "    </div>\n"
  "</body>\n"
  "</html>\n"
;
