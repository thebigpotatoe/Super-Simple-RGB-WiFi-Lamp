void webServerInit() {
  // Set the URI's of the server
  restServer.onNotFound(serve404);
  restServer.on("/", servePage);
  restServer.begin();

  // Set up OTA on the server
  otaInit();

  // Debug
  Serial.println("[webServerInit] - Webserver was set up correctly");
}

void serve404() {
  restServer.send(404, "text/html", ""); 
}

void servePage() {
  // Search and replace:
    // find " and replace   \"                                    (no regex)
    // find ^ and replace     restServer.sendContent_P(PSTR("     (regex)
    // find $ and replace   \                                     (regex)
    // find $ and replace   n"));                                 (regex)

  // Debug 
  Serial.println("[servePage] - Serving webpage");

  // Set the bool 
  webSocketConnecting = true;

  restServer.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  restServer.sendHeader("Pragma", "no-cache");
  restServer.sendHeader("Expires", "-1");
  restServer.setContentLength(CONTENT_LENGTH_UNKNOWN);
  restServer.send(200, "text/html", ""); 

  restServer.sendContent_P(PSTR("<!DOCTYPE html>\n"));
  restServer.sendContent_P(PSTR("<html>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("<head>\n"));
  restServer.sendContent_P(PSTR("    <meta charset=\"utf-8\">\n"));
  restServer.sendContent_P(PSTR("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"));
  restServer.sendContent_P(PSTR("    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n"));
  restServer.sendContent_P(PSTR("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">\n"));
  restServer.sendContent_P(PSTR("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n"));
  restServer.sendContent_P(PSTR("    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\"></script>\n"));
  restServer.sendContent_P(PSTR("    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"></script>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/tinyColorPicker/1.1.1/jqColorPicker.min.js\"></script>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("    <title>RGB WiFi Lamp</title>\n"));
  restServer.sendContent_P(PSTR("    <script>\n"));
  restServer.sendContent_P(PSTR("        var websock;\n"));
  restServer.sendContent_P(PSTR("        var reconnectTimer;\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function onStart() {\n"));
  restServer.sendContent_P(PSTR("            $(\"#currentModeLabel\").html(\"Connecting to lamp...\")\n"));
  restServer.sendContent_P(PSTR("            websock = new WebSocket('ws://' + window.location.hostname + ':81/');\n"));
  restServer.sendContent_P(PSTR("            websock.onopen = function (evt) {\n"));
  restServer.sendContent_P(PSTR("                console.log('websock opened');\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            websock.onclose = function (evt) {\n"));
  restServer.sendContent_P(PSTR("                console.log('websock closed. Reconnecting in 5 seconds');\n"));
  restServer.sendContent_P(PSTR("                $(\"#currentModeLabel\").html(\"Lost connection to lamp! Trying to reconnect.\");\n"));
  restServer.sendContent_P(PSTR("                if (reconnectTimer) { clearTimeout(reconnectTimer); }\n"));
  restServer.sendContent_P(PSTR("                reconnectTimer = setTimeout(function(){ onStart(); }, 5000);\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            websock.onerror = function (evt) {\n"));
  restServer.sendContent_P(PSTR("                console.log(evt);\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            websock.onmessage = function (evt) {\n"));
  restServer.sendContent_P(PSTR("                console.log(\"Incoming Data is: \" + evt.data)\n"));
  restServer.sendContent_P(PSTR("                routeMessage(evt.data)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function routeMessage(jsonString) {\n"));
  restServer.sendContent_P(PSTR("            let jsonMessage = JSON.parse(jsonString);\n"));
  restServer.sendContent_P(PSTR("            // console.log(jsonMessage)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            if (\"Mode\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Mode Message\")\n"));
  restServer.sendContent_P(PSTR("                handleModeMessage(jsonMessage.Mode)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"State\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found State Message\")\n"));
  restServer.sendContent_P(PSTR("                handleStateMessage(jsonMessage.State)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Fade Time\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Fade Time Message\")\n"));
  restServer.sendContent_P(PSTR("                handleFadeTimeMessage(jsonMessage[\"Fade Time\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Colour\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Colour Message\")\n"));
  restServer.sendContent_P(PSTR("                handleColourMessage(jsonMessage.Colour)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Rainbow\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Rainbow Message\")\n"));
  restServer.sendContent_P(PSTR("                handleRainbowMessage(jsonMessage.Rainbow)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Clock\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Clock Message\")\n"));
  restServer.sendContent_P(PSTR("                handleClockMessage(jsonMessage.Clock)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Bell Curve\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Bell Curve Message\")\n"));
  restServer.sendContent_P(PSTR("                handleBellCurveMessage(jsonMessage[\"Bell Curve\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Circle\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Circle Message\")\n"));
  restServer.sendContent_P(PSTR("                handleCircleMessage(jsonMessage[\"Circle\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Sparkle\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Sparkle Message\")\n"));
  restServer.sendContent_P(PSTR("                handleSparkleMessage(jsonMessage[\"Sparkle\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Color Wipe\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Color Wipe Message\")\n"));
  restServer.sendContent_P(PSTR("                handleColorWipeMessage(jsonMessage[\"Color Wipe\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Confetti\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Confetti Message\")\n"));
  restServer.sendContent_P(PSTR("                handleConfettiMessage(jsonMessage[\"Confetti\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Night Rider\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Night Rider Message\")\n"));
  restServer.sendContent_P(PSTR("                handleNightRiderMessage(jsonMessage[\"Night Rider\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Visualiser\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Visualiser Message\")\n"));
  restServer.sendContent_P(PSTR("                handleVisualiserMessage(jsonMessage[\"Visualiser\"])\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("            if (\"Wifi\" in jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                // console.log(\"Found Wifi Message\")\n"));
  restServer.sendContent_P(PSTR("                handleWifiMessage(jsonMessage.Wifi)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleModeMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            // console.log(jsonMessage)\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"string\") {\n"));
  restServer.sendContent_P(PSTR("                $(\"#currentModeLabel\").html(jsonMessage)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleStateMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            // console.log(jsonMessage)\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"boolean\") {\n"));
  restServer.sendContent_P(PSTR("                if (jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("                    $(\"#stateButton\").val(\"ON\")\n"));
  restServer.sendContent_P(PSTR("                    $(\"#stateButton\").html(\"Turn OFF\")\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                else {\n"));
  restServer.sendContent_P(PSTR("                    $(\"#stateButton\").val(\"OFF\")\n"));
  restServer.sendContent_P(PSTR("                    $(\"#stateButton\").html(\"Turn ON\")\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleFadeTimeMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                $(\"#fadeTime\").val(jsonMessage)\n"));
  restServer.sendContent_P(PSTR("                $(\"#fadeTimeLabel\").html(jsonMessage)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleColourMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                var newRed = currentRed\n"));
  restServer.sendContent_P(PSTR("                var newGreen = currentGreen\n"));
  restServer.sendContent_P(PSTR("                var newBlue = currentBlue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                if ((\"Red\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Red === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newRed = jsonMessage.Red\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Green\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Green === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newGreen = jsonMessage.Green\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Blue\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Blue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newBlue = jsonMessage.Blue\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                // onColourButtonEvent(newRed, newGreen, newBlue)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleRainbowMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                if ((\"Hue\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Hue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#rainbowHue\").val(Math.round(jsonMessage.Hue/255*360))\n"));
  restServer.sendContent_P(PSTR("                        $(\"#rainbowHueLabel\").html(Math.round(jsonMessage.Hue/255*360))\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Speed\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Speed === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#rainbowSpeed\").val(jsonMessage.Speed)\n"));
  restServer.sendContent_P(PSTR("                        $(\"#rainbowSpeedLabel\").html(jsonMessage.Speed)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Brightness\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Brightness === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#rainbowBrightness\").val(Math.round(jsonMessage.Brightness/255*100))\n"));
  restServer.sendContent_P(PSTR("                        $(\"#rainbowBrightnessLabel\").html(Math.round(jsonMessage.Brightness/255*100))\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleClockMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                if ((\"hourColour\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.hourColour === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                        var newRed = currentHourRed\n"));
  restServer.sendContent_P(PSTR("                        var newGreen = currentHourGreen\n"));
  restServer.sendContent_P(PSTR("                        var newBlue = currentHourBlue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        if ((\"Red\" in jsonMessage.hourColour)) {\n"));
  restServer.sendContent_P(PSTR("                            if (typeof jsonMessage.hourColour.Red === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                                newRed = jsonMessage.hourColour.Red\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                        if ((\"Green\" in jsonMessage.hourColour)) {\n"));
  restServer.sendContent_P(PSTR("                            if (typeof jsonMessage.hourColour.Green === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                                newGreen = jsonMessage.hourColour.Green\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                        if ((\"Blue\" in jsonMessage.hourColour)) {\n"));
  restServer.sendContent_P(PSTR("                            if (typeof jsonMessage.hourColour.Blue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                                newBlue = jsonMessage.hourColour.Blue\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        // onHourPickerEvent(newRed, newGreen, newBlue)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                if ((\"minuteColour\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.minuteColour === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                        var newRed = currentMinRed\n"));
  restServer.sendContent_P(PSTR("                        var newGreen = currentMinGreen\n"));
  restServer.sendContent_P(PSTR("                        var newBlue = currentMinBlue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        if ((\"Red\" in jsonMessage.minuteColour)) {\n"));
  restServer.sendContent_P(PSTR("                            if (typeof jsonMessage.minuteColour.Red === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                                newRed = jsonMessage.minuteColour.Red\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                        if ((\"Green\" in jsonMessage.minuteColour)) {\n"));
  restServer.sendContent_P(PSTR("                            if (typeof jsonMessage.minuteColour.Green === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                                newGreen = jsonMessage.minuteColour.Green\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                        if ((\"Blue\" in jsonMessage.minuteColour)) {\n"));
  restServer.sendContent_P(PSTR("                            if (typeof jsonMessage.minuteColour.Blue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                                newBlue = jsonMessage.minuteColour.Blue\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        // onMinPickerEvent(newRed, newGreen, newBlue)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleBellCurveMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                var newRed = bellRed\n"));
  restServer.sendContent_P(PSTR("                var newGreen = bellGreen\n"));
  restServer.sendContent_P(PSTR("                var newBlue = bellBlue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                if ((\"Red\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Red === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newRed = jsonMessage.Red\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Green\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Green === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newGreen = jsonMessage.Green\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Blue\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Blue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newBlue = jsonMessage.Blue\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                // onOnBellCurvePickerEvent(newRed, newGreen, newBlue)\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleCircleMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                \n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleNightRiderMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                \n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleSparkleMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                var newRed = currentRed\n"));
  restServer.sendContent_P(PSTR("                var newGreen = currentGreen\n"));
  restServer.sendContent_P(PSTR("                var newBlue = currentBlue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                if ((\"Red\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Red === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newRed = jsonMessage.Red\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Green\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Green === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newGreen = jsonMessage.Green\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Blue\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Blue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newBlue = jsonMessage.Blue\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleColorWipeMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                var newRed = currentRed\n"));
  restServer.sendContent_P(PSTR("                var newGreen = currentGreen\n"));
  restServer.sendContent_P(PSTR("                var newBlue = currentBlue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                if ((\"Red\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Red === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newRed = jsonMessage.Red\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Green\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Green === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newGreen = jsonMessage.Green\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Blue\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Blue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newBlue = jsonMessage.Blue\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleConfettiMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                var newRed = currentRed\n"));
  restServer.sendContent_P(PSTR("                var newGreen = currentGreen\n"));
  restServer.sendContent_P(PSTR("                var newBlue = currentBlue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                if ((\"Red\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Red === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newRed = jsonMessage.Red\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Green\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Green === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newGreen = jsonMessage.Green\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"Blue\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Blue === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        newBlue = jsonMessage.Blue\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleVisualiserMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                if ((\"Period\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.Period === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserPeriod\").val(jsonMessage.Period)\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserPeriodLabel\").html(Math.round(1000000/jsonMessage.Period/2))\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"MinThreshold\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.MinThreshold === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserMinThreshold\").val(jsonMessage.MinThreshold)\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserMinThresholdLabel\").html(jsonMessage.MinThreshold)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"MaxThreshold\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.MaxThreshold === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserMaxThreshold\").val(jsonMessage.MaxThreshold)\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserMaxThresholdLabel\").html(jsonMessage.MaxThreshold)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"FadeUp\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.FadeUp === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserFadeUp\").val(jsonMessage.FadeUp)\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserFadeUpLabel\").html(jsonMessage.FadeUp)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"FadeDown\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.FadeDown === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserFadeDown\").val(jsonMessage.FadeDown)\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserFadeDownLabel\").html(jsonMessage.FadeDown)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("                if ((\"HueOffset\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.HueOffset === \"number\") {\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserHueOffset\").val(Math.round(jsonMessage.HueOffset/255*360))\n"));
  restServer.sendContent_P(PSTR("                        $(\"#visualiserHueOffsetLabel\").html(Math.round(jsonMessage.HueOffset/255*360))\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function handleWifiMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            // {\n"));
  restServer.sendContent_P(PSTR("            //     \"Wifi\" : {\n"));
  restServer.sendContent_P(PSTR("            //         \"ScanResults\" : [\n"));
  restServer.sendContent_P(PSTR("            //             {\n"));
  restServer.sendContent_P(PSTR("            //                 \"SSID\" : \"Test\",\n"));
  restServer.sendContent_P(PSTR("            //                 \"RSSI\" : -70,\n"));
  restServer.sendContent_P(PSTR("            //                 \"BSSID\" : \"MAC\",\n"));
  restServer.sendContent_P(PSTR("            //                 \"Channel\" : 1,\n"));
  restServer.sendContent_P(PSTR("            //                 \"Encrypt\" : \"Yes\"\n"));
  restServer.sendContent_P(PSTR("            //             }\n"));
  restServer.sendContent_P(PSTR("            //         ]\n"));
  restServer.sendContent_P(PSTR("            //     }\n"));
  restServer.sendContent_P(PSTR("            // }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            // console.log(jsonMessage)\n"));
  restServer.sendContent_P(PSTR("            if (typeof jsonMessage === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                if ((\"ScanResults\" in jsonMessage)) {\n"));
  restServer.sendContent_P(PSTR("                    if (typeof jsonMessage.ScanResults === \"object\") {\n"));
  restServer.sendContent_P(PSTR("                        let specific_tbody = document.getElementById(\"wifiTableBody\");\n"));
  restServer.sendContent_P(PSTR("                        for (var i = specific_tbody.rows.length - 1; i > -1; i--) {\n"));
  restServer.sendContent_P(PSTR("                            specific_tbody.deleteRow(i);\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        for (var i = 0; i < jsonMessage.ScanResults.length; i++) {\n"));
  restServer.sendContent_P(PSTR("                            let row = specific_tbody.insertRow(-1);\n"));
  restServer.sendContent_P(PSTR("                            let ssidCell = row.insertCell(0).appendChild(document.createTextNode(jsonMessage.ScanResults[i].SSID));\n"));
  restServer.sendContent_P(PSTR("                            let rssiCell = row.insertCell(1).appendChild(document.createTextNode(jsonMessage.ScanResults[i].RSSI));\n"));
  restServer.sendContent_P(PSTR("                            let bssidCell = row.insertCell(2).appendChild(document.createTextNode(jsonMessage.ScanResults[i].BSSID));\n"));
  restServer.sendContent_P(PSTR("                            let channelCell = row.insertCell(3).appendChild(document.createTextNode(jsonMessage.ScanResults[i].CHANNEL));\n"));
  restServer.sendContent_P(PSTR("                            let encryptedCell = row.insertCell(4).appendChild(document.createTextNode(jsonMessage.ScanResults[i].ENCRYPT));\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                            row.addEventListener(\"click\", function () {\n"));
  restServer.sendContent_P(PSTR("                                document.getElementById('SSIDInput').value = this.firstChild.innerHTML;\n"));
  restServer.sendContent_P(PSTR("                            });\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        function sendMessage(jsonMessage) {\n"));
  restServer.sendContent_P(PSTR("            console.log(\"Sending: \" + JSON.stringify(jsonMessage))\n"));
  restServer.sendContent_P(PSTR("            if (websock != null && websock.readyState == 1) {\n"));
  restServer.sendContent_P(PSTR("                websock.send(JSON.stringify(jsonMessage));\n"));
  restServer.sendContent_P(PSTR("            } else {\n"));
  restServer.sendContent_P(PSTR("                console.warn(\"Websockets are closed\")\n"));
  restServer.sendContent_P(PSTR("            }\n"));
  restServer.sendContent_P(PSTR("        }       \n"));
  restServer.sendContent_P(PSTR("    </script>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("</head>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("<body class=\"bg-dark text-light text-justify\" onload=\"javascript:onStart();\">\n"));
  restServer.sendContent_P(PSTR("    <nav class=\"navbar navbar-expand-sm bg-secondary navbar-dark fixed-top\" id=\"navbarHeader\">\n"));
  restServer.sendContent_P(PSTR("        <div class=\"container-fluid\">\n"));
  restServer.sendContent_P(PSTR("            <a class=\"navbar-brand\" href=\"#\" id=\"HomeButton\">RGB WiFi Lamp</a>\n"));
  restServer.sendContent_P(PSTR("            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n"));
  restServer.sendContent_P(PSTR("                <span class=\"navbar-toggler-icon\"></span>\n"));
  restServer.sendContent_P(PSTR("            </button>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\n"));
  restServer.sendContent_P(PSTR("                <ul class=\"nav navbar-nav\">\n"));
  restServer.sendContent_P(PSTR("                    <li class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a id=\"homeTabNavItem\" class=\"nav-link active\" data-toggle=\"tab\" href=\"#Home\">Home</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a id=\"colourTabNavItem\" class=\"nav-link\" data-toggle=\"tab\" href=\"#Colour\">Colour</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"rainbowTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Rainbow\">Rainbow</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"clockTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Clock\">Clock</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"bellCurveTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#BellCurve\">Bell Curve</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"circleTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Circle\">Circle</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"nightRiderTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#NightRider\">Night Rider</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"sparkleTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Sparkle\">Sparkle</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"colorWipeTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#ColorWipe\">Color Wipe</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"confettiTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Confetti\">Confetti</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"visualiserTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#Visualiser\">Visualiser</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                    <li id=\"wifiTabNavItem\" class=\"nav-item\">\n"));
  restServer.sendContent_P(PSTR("                        <a class=\"nav-link\" data-toggle=\"tab\" href=\"#WfiConfig\">Wifi</a>\n"));
  restServer.sendContent_P(PSTR("                    </li>\n"));
  restServer.sendContent_P(PSTR("                </ul>\n"));
  restServer.sendContent_P(PSTR("                <script>\n"));
  restServer.sendContent_P(PSTR("                    $(\"#colourTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Colour\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#rainbowTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Rainbow\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#clockTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Clock\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#bellCurveTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Bell Curve\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#circleTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Circle\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#nightRiderTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Night Rider\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#sparkleTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Sparkle\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#colorWipeTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Color Wipe\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#confettiTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Confetti\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                    $(\"#visualiserTabNavItem\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                        sendMessage({\"Mode\":\"Visualiser\"})\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("                </script>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <script>\n"));
  restServer.sendContent_P(PSTR("            $(function () {\n"));
  restServer.sendContent_P(PSTR("                $(\".nav-item\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $(\".collapse\").collapse('hide');\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("            });\n"));
  restServer.sendContent_P(PSTR("        </script>\n"));
  restServer.sendContent_P(PSTR("    </nav>\n"));
  restServer.sendContent_P(PSTR("    <div class=\"tab-content container\" style=\"margin-top:80px\">\n"));
  restServer.sendContent_P(PSTR("        <div id=\"modeDisplay\" class=\"container\">\n"));
  restServer.sendContent_P(PSTR("            <h1>Mode: <span id=\"currentModeLabel\"></span></h1>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"col mb-4\">\n"));
  restServer.sendContent_P(PSTR("                <label for=\"fadeTime\">Fade Time: <span id=\"fadeTimeLabel\">200</span> milliseconds</label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"fadeTime\" type=\"range\" min=\"0\" max=\"2000\" step=\"100\" value=\"200\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"stateButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\" value=\"OFF\">Turn ON</button>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                fadeTimeDebounce = Date.now()\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $(\"#stateButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    var newState = $(\"#stateButton\").val() == \"ON\" ? \"OFF\" : \"ON\"\n"));
  restServer.sendContent_P(PSTR("                    onStateButtonEvent(newState)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#fadeTime\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onFadeTimeEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#fadeTime\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onFadeTimeEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onStateButtonEvent(currentState) {\n"));
  restServer.sendContent_P(PSTR("                    if (currentState != $(\"#stateButton\").val()){\n"));
  restServer.sendContent_P(PSTR("                        if (currentState === \"OFF\") {\n"));
  restServer.sendContent_P(PSTR("                            msgValue = false\n"));
  restServer.sendContent_P(PSTR("                            $(\"#stateButton\").val(\"OFF\")\n"));
  restServer.sendContent_P(PSTR("                            $(\"#stateButton\").html(\"Turn ON\")\n"));
  restServer.sendContent_P(PSTR("                        } \n"));
  restServer.sendContent_P(PSTR("                        else if (currentState === \"ON\") {\n"));
  restServer.sendContent_P(PSTR("                            msgValue = true\n"));
  restServer.sendContent_P(PSTR("                            $(\"#stateButton\").val(\"ON\")\n"));
  restServer.sendContent_P(PSTR("                            $(\"#stateButton\").html(\"Turn OFF\")\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        msg = {\n"));
  restServer.sendContent_P(PSTR("                            \"State\": msgValue\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onFadeTimeEvent() {\n"));
  restServer.sendContent_P(PSTR("                    let currentFadeTimeValue = parseInt($(\"#fadeTime\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#fadeTimeLabel\").html(currentFadeTimeValue)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"Fade Time\" : currentFadeTimeValue\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (Date.now() - fadeTimeDebounce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        fadeTimeDebounce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            </script>\n"));
  restServer.sendContent_P(PSTR("            <hr>\n"));
  restServer.sendContent_P(PSTR("        </div>     \n"));
  restServer.sendContent_P(PSTR("        <div id=\"Home\" class=\"container tab-pane active\">\n"));
  restServer.sendContent_P(PSTR("            <h1>Home</h1>\n"));
  restServer.sendContent_P(PSTR("            <p>Welcome to your RGB WiFi Lamp web page! Here you can change the mode to one of the pre programmed ones below. Click any of the buttons to interact with the light.</p>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"colourButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Colour</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"rainbowButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Rainbow</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"clockButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Clock</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"bellCurveButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Bell Curve</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"circleButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Circle</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"nightRiderButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Night Rider</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"sparkleButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Sparkle</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"colorWipeButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Color Wipe</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"confettiButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Confetti</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"visualiserButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Visualiser</button>\n"));
  restServer.sendContent_P(PSTR("            <button id=\"wifiButton\" type=\"submit\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Wifi Config</button>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                $(\"#HomeButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Home\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#colourButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Colour\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Colour\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#rainbowButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Rainbow\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Rainbow\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#clockButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Clock\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Clock\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#bellCurveButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#BellCurve\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Bell Curve\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#circleButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Circle\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Circle\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#nightRiderButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#NightRider\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Night Rider\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#sparkleButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Sparkle\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Sparkle\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#colorWipeButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#ColorWipe\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Color Wipe\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#confettiButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Confetti\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Confetti\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#Visualiser\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                    sendMessage({\"Mode\":\"Visualiser\"})\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#wifiButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    $('#navbarHeader a[href=\"#WfiConfig\"]').tab('show')\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("            </script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"Colour\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Colour Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>Here you can set the light to any colour you desire. There are also a couple of buttons for setting the\n"));
  restServer.sendContent_P(PSTR("                light to different shades of white</p>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                <input id=\"colourSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\" value=\"rgb(0,0,0)\"></input>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                <button id=\"redButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Red</button>\n"));
  restServer.sendContent_P(PSTR("                <button id=\"greenButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Green</button>\n"));
  restServer.sendContent_P(PSTR("                <button id=\"blueButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Blue</button>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                <button id=\"yellowButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Yellow</button>\n"));
  restServer.sendContent_P(PSTR("                <button id=\"cyanButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Cyan</button>\n"));
  restServer.sendContent_P(PSTR("                <button id=\"magentaButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Magenta</button>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                <button id=\"2500Button\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">2500K</button>\n"));
  restServer.sendContent_P(PSTR("                <button id=\"3000Button\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">3000K</button>\n"));
  restServer.sendContent_P(PSTR("                <button id=\"4000Button\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">4000K</button>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                var currentRed = 0;\n"));
  restServer.sendContent_P(PSTR("                var currentGreen = 0;\n"));
  restServer.sendContent_P(PSTR("                var currentBlue = 0;\n"));
  restServer.sendContent_P(PSTR("                var colourDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $('#colourSelectButton').colorPicker({\n"));
  restServer.sendContent_P(PSTR("                    customBG: '#222',\n"));
  restServer.sendContent_P(PSTR("                    margin: '4px -2px 0',\n"));
  restServer.sendContent_P(PSTR("                    doRender: 'div div',\n"));
  restServer.sendContent_P(PSTR("                    preventFocus: true,\n"));
  restServer.sendContent_P(PSTR("                    animationSpeed: 150,\n"));
  restServer.sendContent_P(PSTR("                    forceAlpha : false,\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    // demo on how to make plugins... mobile support plugin\n"));
  restServer.sendContent_P(PSTR("                    buildCallback: function($elm) {\n"));
  restServer.sendContent_P(PSTR("                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"));
  restServer.sendContent_P(PSTR("                    },\n"));
  restServer.sendContent_P(PSTR("                    cssAddon:\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-slider {width:200px; height:200px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-slider {height:200px; width:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha {height:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    renderCallback: function($elm, toggled) {\n"));
  restServer.sendContent_P(PSTR("                        var colors = this.color.colors;\n"));
  restServer.sendContent_P(PSTR("                        onColourButtonEvent(Math.round(colors.rgb.r*255), Math.round(colors.rgb.g*255), Math.round(colors.rgb.b*255))\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                })\n"));
  restServer.sendContent_P(PSTR("                $(\"#redButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(255, 0, 0)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#greenButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(0, 255, 0)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#blueButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(0, 0, 255)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#yellowButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(255, 255, 0)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#cyanButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(0, 255, 255)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#magentaButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(255, 0, 255)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#2500Button\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(206, 57, 18)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#3000Button\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(235, 71, 30)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#4000Button\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onColourButtonEvent(238, 99, 63)\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onColourButtonEvent(red, green, blue) {\n"));
  restServer.sendContent_P(PSTR("                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"));
  restServer.sendContent_P(PSTR("                        currentRed = red\n"));
  restServer.sendContent_P(PSTR("                        currentGreen = green\n"));
  restServer.sendContent_P(PSTR("                        currentBlue = blue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        msg = {\n"));
  restServer.sendContent_P(PSTR("                                \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                                \"Mode\" : \"Colour\",\n"));
  restServer.sendContent_P(PSTR("                                \"Colour\": {\n"));
  restServer.sendContent_P(PSTR("                                    \"Red\": red,\n"));
  restServer.sendContent_P(PSTR("                                    \"Green\": green,\n"));
  restServer.sendContent_P(PSTR("                                    \"Blue\": blue\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                        if (Date.now() - colourDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                            colourDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                            sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            </Script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"Rainbow\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Rainbow Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>Here you can set the mode to rainbow. This mode produces a rainbow all the way around the light and\n"));
  restServer.sendContent_P(PSTR("                slowly shifts the colours clockwise. On this page you can set the speed of this as well as the\n"));
  restServer.sendContent_P(PSTR("                brightness of the light</p>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"rainbowHue\">Start Hue: <span id=\"rainbowHueLabel\">0</span> Degrees</label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"rainbowHue\" type=\"range\" min=\"0\" max=\"359\" step=\"1\" value=\"0\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"rainbowBrightness\">Rainbow Brightness: <span id=\"rainbowBrightnessLabel\">100</span>%</label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"rainbowBrightness\" type=\"range\" min=\"0\" max=\"100\" step=\"1\" value=\"100\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"rainbowSpeed\">Rainbow Speed: <span id=\"rainbowSpeedLabel\">10</span> seconds</label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"rainbowSpeed\" type=\"range\" min=\"0\" max=\"10\" step=\"1\" value=\"10\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                var rainbowDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                var rainbowLastMessage = \"\"\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $(\"#rainbowHue\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onRainboWHueEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#rainbowHue\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onRainboWHueEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#rainbowSpeed\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onRainboWEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#rainbowSpeed\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onRainboWEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#rainbowBrightness\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onRainboWEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#rainbowBrightness\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onRainboWEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onRainboWHueEvent() {\n"));
  restServer.sendContent_P(PSTR("                    \n"));
  restServer.sendContent_P(PSTR("                    let currentHueValue = parseInt($(\"#rainbowHue\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    let currentBrightnessValue = parseInt($(\"#rainbowBrightness\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    \n"));
  restServer.sendContent_P(PSTR("                    $(\"#rainbowSpeed\").val = 0;\n"));
  restServer.sendContent_P(PSTR("                    $(\"#rainbowSpeedLabel\").html(0)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#rainbowHueLabel\").html(currentHueValue)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#rainbowBrightnessLabel\").html(currentBrightnessValue)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                        \"Mode\" : \"Rainbow\",\n"));
  restServer.sendContent_P(PSTR("                        \"Rainbow\": { \n"));
  restServer.sendContent_P(PSTR("                            \"Hue\" : Math.round(currentHueValue/360*255),\n"));
  restServer.sendContent_P(PSTR("                            \"Speed\": 0,\n"));
  restServer.sendContent_P(PSTR("                            \"Brightness\": Math.round(currentBrightnessValue/100*255)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (msg != rainbowLastMessage && Date.now() - rainbowDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        rainbowDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        rainbowLastMessage = msg\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onRainboWEvent() {\n"));
  restServer.sendContent_P(PSTR("                    let currentSpeedValue = parseFloat($(\"#rainbowSpeed\").val())\n"));
  restServer.sendContent_P(PSTR("                    let currentBrightnessValue = parseInt($(\"#rainbowBrightness\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    $(\"#rainbowSpeedLabel\").html(currentSpeedValue)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#rainbowBrightnessLabel\").html(currentBrightnessValue)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                        \"Mode\" : \"Rainbow\",\n"));
  restServer.sendContent_P(PSTR("                        \"Rainbow\": { \n"));
  restServer.sendContent_P(PSTR("                            \"Speed\": currentSpeedValue,\n"));
  restServer.sendContent_P(PSTR("                            \"Brightness\": Math.round(currentBrightnessValue/100*255)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (msg != rainbowLastMessage && Date.now() - rainbowDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        rainbowDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        rainbowLastMessage = msg\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            </script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"Clock\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Clock Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>In this mode the light will display the current time in 12 hr format uisng the\n"));
  restServer.sendContent_P(PSTR("                top and bottom side of the light. On the top is the current hour, and the bottom is the minute. The left\n"));
  restServer.sendContent_P(PSTR("                of teh light represents 0 and the right represents either 12hr or 60mins. You can choose the colour of\n"));
  restServer.sendContent_P(PSTR("                the hour and minute light to what you would desire. If your clock is out of sync\n"));
  restServer.sendContent_P(PSTR("                you can click the resync button (note this should be automatically done on the device for you)</p>\n"));
  restServer.sendContent_P(PSTR("            <h2>Current Time: <span id=\"clockPrintOut\"></span></h2>\n"));
  restServer.sendContent_P(PSTR("                <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                    <button id=\"clockHourColourButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\">Hour Colour</button>\n"));
  restServer.sendContent_P(PSTR("                    <button id=\"clockMinuteColourButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\">Minute Colour</button>\n"));
  restServer.sendContent_P(PSTR("                </div>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                <script>\n"));
  restServer.sendContent_P(PSTR("                    clockHourDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                    clockMinDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                    var currentHourRed = 0\n"));
  restServer.sendContent_P(PSTR("                    var currentHourGreen = 0\n"));
  restServer.sendContent_P(PSTR("                    var currentHourBlue = 0\n"));
  restServer.sendContent_P(PSTR("                    var currentMinRed = 0\n"));
  restServer.sendContent_P(PSTR("                    var currentMinGreen = 0\n"));
  restServer.sendContent_P(PSTR("                    var currentMinBlue = 0\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    $('#clockHourColourButton').colorPicker({\n"));
  restServer.sendContent_P(PSTR("                        customBG: '#222',\n"));
  restServer.sendContent_P(PSTR("                        margin: '4px -2px 0',\n"));
  restServer.sendContent_P(PSTR("                        doRender: 'div div',\n"));
  restServer.sendContent_P(PSTR("                        preventFocus: true,\n"));
  restServer.sendContent_P(PSTR("                        animationSpeed: 150,\n"));
  restServer.sendContent_P(PSTR("                        forceAlpha : false,\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        // demo on how to make plugins... mobile support plugin\n"));
  restServer.sendContent_P(PSTR("                        buildCallback: function($elm) {\n"));
  restServer.sendContent_P(PSTR("                            this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"));
  restServer.sendContent_P(PSTR("                        },\n"));
  restServer.sendContent_P(PSTR("                        cssAddon:\n"));
  restServer.sendContent_P(PSTR("                            '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-xy-slider {width:200px; height:200px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-z-slider {height:200px; width:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-alpha {height:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        renderCallback: function($elm, toggled) {\n"));
  restServer.sendContent_P(PSTR("                            var colors = this.color.colors;\n"));
  restServer.sendContent_P(PSTR("                            onHourPickerEvent(Math.round(colors.rgb.r*255), Math.round(colors.rgb.g*255), Math.round(colors.rgb.b*255))\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                            this.$colorPatch.css({\n"));
  restServer.sendContent_P(PSTR("                                backgroundColor: '#' + colors.HEX,\n"));
  restServer.sendContent_P(PSTR("                                color: colors.RGBLuminance > 0.22 ? '#222' : '#ddd'\n"));
  restServer.sendContent_P(PSTR("                            }).text(this.color.toString($elm._colorMode)); // $elm.val();\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    })\n"));
  restServer.sendContent_P(PSTR("                    $('#clockMinuteColourButton').colorPicker({\n"));
  restServer.sendContent_P(PSTR("                        customBG: '#222',\n"));
  restServer.sendContent_P(PSTR("                        margin: '4px -2px 0',\n"));
  restServer.sendContent_P(PSTR("                        doRender: 'div div',\n"));
  restServer.sendContent_P(PSTR("                        preventFocus: true,\n"));
  restServer.sendContent_P(PSTR("                        animationSpeed: 150,\n"));
  restServer.sendContent_P(PSTR("                        forceAlpha : false,\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        // demo on how to make plugins... mobile support plugin\n"));
  restServer.sendContent_P(PSTR("                        buildCallback: function($elm) {\n"));
  restServer.sendContent_P(PSTR("                            this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"));
  restServer.sendContent_P(PSTR("                        },\n"));
  restServer.sendContent_P(PSTR("                        cssAddon:\n"));
  restServer.sendContent_P(PSTR("                            '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-xy-slider {width:200px; height:200px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-z-slider {height:200px; width:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-alpha {height:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                            '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        renderCallback: function($elm, toggled) {\n"));
  restServer.sendContent_P(PSTR("                            var colors = this.color.colors;\n"));
  restServer.sendContent_P(PSTR("                            onMinPickerEvent(Math.round(colors.rgb.r*255), Math.round(colors.rgb.g*255), Math.round(colors.rgb.b*255))\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                            this.$colorPatch.css({\n"));
  restServer.sendContent_P(PSTR("                                backgroundColor: '#' + colors.HEX,\n"));
  restServer.sendContent_P(PSTR("                                color: colors.RGBLuminance > 0.22 ? '#222' : '#ddd'\n"));
  restServer.sendContent_P(PSTR("                            }).text(this.color.toString($elm._colorMode)); // $elm.val();\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    })\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    $(function () {\n"));
  restServer.sendContent_P(PSTR("                        clockTick()\n"));
  restServer.sendContent_P(PSTR("                    });\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    function clockTick() {\n"));
  restServer.sendContent_P(PSTR("                        let today = new Date();\n"));
  restServer.sendContent_P(PSTR("                        let h = (today.getHours() % 12 < 10) ? \"0\" + today.getHours() % 12 : today.getHours() % 12\n"));
  restServer.sendContent_P(PSTR("                        let m = (today.getMinutes() < 10) ? \"0\" + today.getMinutes() : today.getMinutes()\n"));
  restServer.sendContent_P(PSTR("                        let s = (today.getSeconds() < 10) ? \"0\" + today.getSeconds() : today.getSeconds()\n"));
  restServer.sendContent_P(PSTR("                        let ampm = (today.getHours() >= 12) ? 'PM' : 'AM';\n"));
  restServer.sendContent_P(PSTR("                        h = (today.getHours() != 0) ? h : \"12\";\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        var t = setTimeout(clockTick, 1000);\n"));
  restServer.sendContent_P(PSTR("                        $(\"#clockPrintOut\").html(h + \":\" + m + \":\" + s + \" \" + ampm)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    function onHourPickerEvent(red, green, blue) {\n"));
  restServer.sendContent_P(PSTR("                        if (currentHourRed != red || currentHourGreen != green || currentHourBlue != blue) {\n"));
  restServer.sendContent_P(PSTR("                            currentHourRed = red\n"));
  restServer.sendContent_P(PSTR("                            currentHourGreen = green\n"));
  restServer.sendContent_P(PSTR("                            currentHourBlue = blue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                            msg = {\n"));
  restServer.sendContent_P(PSTR("                                \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                                \"Mode\" : \"Clock\", \n"));
  restServer.sendContent_P(PSTR("                                \"Clock\": {\n"));
  restServer.sendContent_P(PSTR("                                    \"hourColour\": {\n"));
  restServer.sendContent_P(PSTR("                                        \"Red\": red,\n"));
  restServer.sendContent_P(PSTR("                                        \"Green\": green,\n"));
  restServer.sendContent_P(PSTR("                                        \"Blue\": blue\n"));
  restServer.sendContent_P(PSTR("                                    }\n"));
  restServer.sendContent_P(PSTR("                                }\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                            if (Date.now() - clockHourDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                                clockHourDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                                sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    function onMinPickerEvent(red, green, blue) {\n"));
  restServer.sendContent_P(PSTR("                        if (currentMinRed != red || currentMinGreen != green || currentMinBlue != blue) {\n"));
  restServer.sendContent_P(PSTR("                            currentMinRed = red\n"));
  restServer.sendContent_P(PSTR("                            currentMinGreen = green\n"));
  restServer.sendContent_P(PSTR("                            currentMinBlue = blue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                            msg = {\n"));
  restServer.sendContent_P(PSTR("                                \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                                \"Mode\" : \"Clock\", \n"));
  restServer.sendContent_P(PSTR("                                \"Clock\": {\n"));
  restServer.sendContent_P(PSTR("                                    \"minColour\": {\n"));
  restServer.sendContent_P(PSTR("                                        \"Red\": red,\n"));
  restServer.sendContent_P(PSTR("                                        \"Green\": green,\n"));
  restServer.sendContent_P(PSTR("                                        \"Blue\": blue\n"));
  restServer.sendContent_P(PSTR("                                    }\n"));
  restServer.sendContent_P(PSTR("                                }\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                            if (Date.now() - clockMinDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                                clockMinDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                                sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                </script>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"BellCurve\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Bell Curve Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>In this mode the lamp will shape the light into a bell curve. This is meant to be more asthetically pleasing than the regular colour mode.</p>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                <input id=\"bellCurveSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\" value=\"rgb(0,0,0)\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                bellCurveDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                var bellRed = 0\n"));
  restServer.sendContent_P(PSTR("                var bellGreen = 0\n"));
  restServer.sendContent_P(PSTR("                var bellBlue = 0\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $('#bellCurveSelectButton').colorPicker({\n"));
  restServer.sendContent_P(PSTR("                    customBG: '#222',\n"));
  restServer.sendContent_P(PSTR("                    margin: '4px -2px 0',\n"));
  restServer.sendContent_P(PSTR("                    doRender: 'div div',\n"));
  restServer.sendContent_P(PSTR("                    preventFocus: true,\n"));
  restServer.sendContent_P(PSTR("                    animationSpeed: 150,\n"));
  restServer.sendContent_P(PSTR("                    forceAlpha : false,\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    // demo on how to make plugins... mobile support plugin\n"));
  restServer.sendContent_P(PSTR("                    buildCallback: function($elm) {\n"));
  restServer.sendContent_P(PSTR("                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"));
  restServer.sendContent_P(PSTR("                    },\n"));
  restServer.sendContent_P(PSTR("                    cssAddon:\n"));
  restServer.sendContent_P(PSTR("                        '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-slider {width:200px; height:200px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-slider {height:200px; width:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha {height:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    renderCallback: function($elm, toggled) {\n"));
  restServer.sendContent_P(PSTR("                        var colors = this.color.colors;\n"));
  restServer.sendContent_P(PSTR("                        onOnBellCurvePickerEvent(Math.round(colors.rgb.r*255), Math.round(colors.rgb.g*255), Math.round(colors.rgb.b*255))\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        this.$colorPatch.css({\n"));
  restServer.sendContent_P(PSTR("                            backgroundColor: '#' + colors.HEX,\n"));
  restServer.sendContent_P(PSTR("                            color: colors.RGBLuminance > 0.22 ? '#222' : '#ddd'\n"));
  restServer.sendContent_P(PSTR("                        }).text(this.color.toString($elm._colorMode)); // $elm.val();\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                })\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onOnBellCurvePickerEvent(red, green, blue) {\n"));
  restServer.sendContent_P(PSTR("                    if (bellRed != red || bellGreen != green || bellBlue != blue) {\n"));
  restServer.sendContent_P(PSTR("                        msg = {\n"));
  restServer.sendContent_P(PSTR("                            \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                            \"Mode\" : \"Bell Curve\", \n"));
  restServer.sendContent_P(PSTR("                            \"Bell Curve\": {\n"));
  restServer.sendContent_P(PSTR("                                \"Red\": red,\n"));
  restServer.sendContent_P(PSTR("                                \"Green\": green,\n"));
  restServer.sendContent_P(PSTR("                                \"Blue\": blue\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        if (Date.now() - bellCurveDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                            bellCurveDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                            sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            </script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"Circle\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Circle Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>A simple dot moving round the lamp.\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"NightRider\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Night Rider Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>Knight Rider. A shadowy flight into the dangerous world of a man who does not exist. \n"));
  restServer.sendContent_P(PSTR("                Michael Knight: a young loner on a crusade to champion the cause of the innocent, \n"));
  restServer.sendContent_P(PSTR("                the helpless, the powerless, in a world of criminals who operate above the law.</p>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"Sparkle\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Sparkle Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>This is the Sparkle mode..</p>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                <input id=\"sparkleSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\" value=\"rgb(0,0,0)\"></input>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  //restServer.sendContent_P(PSTR("            <div>\n"));
  //restServer.sendContent_P(PSTR("                <label for=\"sparkleSpeed\">Sparkle Speed: <span id=\"sparkleSpeedLabel\">5</span> seconds</label>\n"));
  //restServer.sendContent_P(PSTR("                <input id=\"sparkleSpeed\" type=\"range\" min=\"0\" max=\"10\" step=\"1\" value=\"5\" class=\"form-control-range\">\n"));
  //restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                var sparkleLastMessage = \"\"\n"));
  restServer.sendContent_P(PSTR("                $(\"#sparkleSpeed\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onSparkleEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#sparkleSpeed\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onSparkleEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                var sparkleRed = 0;\n"));
  restServer.sendContent_P(PSTR("                var sparkleGreen = 0;\n"));
  restServer.sendContent_P(PSTR("                var sparkleBlue = 0;\n"));
  restServer.sendContent_P(PSTR("                var sparkleDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $('#sparkleSelectButton').colorPicker({\n"));
  restServer.sendContent_P(PSTR("                    customBG: '#222',\n"));
  restServer.sendContent_P(PSTR("                    margin: '4px -2px 0',\n"));
  restServer.sendContent_P(PSTR("                    doRender: 'div div',\n"));
  restServer.sendContent_P(PSTR("                    preventFocus: true,\n"));
  restServer.sendContent_P(PSTR("                    animationSpeed: 150,\n"));
  restServer.sendContent_P(PSTR("                    forceAlpha : false,\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    // demo on how to make plugins... mobile support plugin\n"));
  restServer.sendContent_P(PSTR("                    buildCallback: function($elm) {\n"));
  restServer.sendContent_P(PSTR("                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"));
  restServer.sendContent_P(PSTR("                    },\n"));
  restServer.sendContent_P(PSTR("                    cssAddon:\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-slider {width:200px; height:200px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-slider {height:200px; width:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha {height:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    renderCallback: function($elm, toggled) {\n"));
  restServer.sendContent_P(PSTR("                        var colors = this.color.colors;\n"));
  restServer.sendContent_P(PSTR("                        onSparkleButtonEvent(Math.round(colors.rgb.r*255), Math.round(colors.rgb.g*255), Math.round(colors.rgb.b*255))\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                })\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onSparkleEvent() {\n"));
  restServer.sendContent_P(PSTR("                    let currentSpeedValue = parseFloat($(\"#sparkleSpeed\").val())\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    $(\"#sparkleSpeedLabel\").html(currentSpeedValue)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                        \"Mode\" : \"Sparkle\",\n"));
  restServer.sendContent_P(PSTR("                        \"Sparkle\": { \n"));
  restServer.sendContent_P(PSTR("                            \"Speed\": currentSpeedValue,\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (msg != sparkleLastMessage && Date.now() - sparkleDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        sparkleDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        sparkleLastMessage = msg\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onSparkleButtonEvent(red, green, blue) {\n"));
  restServer.sendContent_P(PSTR("                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"));
  restServer.sendContent_P(PSTR("                        currentRed = red\n"));
  restServer.sendContent_P(PSTR("                        currentGreen = green\n"));
  restServer.sendContent_P(PSTR("                        currentBlue = blue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        msg = {\n"));
  restServer.sendContent_P(PSTR("                                \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                                \"Mode\" : \"Sparkle\",\n"));
  restServer.sendContent_P(PSTR("                                \"Sparkle\": {\n"));
  restServer.sendContent_P(PSTR("                                    \"Red\": red,\n"));
  restServer.sendContent_P(PSTR("                                    \"Green\": green,\n"));
  restServer.sendContent_P(PSTR("                                    \"Blue\": blue\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                        if (Date.now() - sparkleDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                            sparkleDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                            sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                    if (msg != sparkleLastMessage && Date.now() - sparkleDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        sparkleDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        sparkleLastMessage = msg\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            </Script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"ColorWipe\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Color Wipe Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>Color Wipe will fill the light with a color in a wiping fashion then wipe the light away.</p>\n"));
  restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  restServer.sendContent_P(PSTR("                <input id=\"colorWipeSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\" value=\"rgb(0,0,0)\"></input>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                var colorWipeLastMessage = \"\"\n"));
  restServer.sendContent_P(PSTR("                var colorWipeRed = 0\n"));
  restServer.sendContent_P(PSTR("                var colorWipeGreen = 0\n"));
  restServer.sendContent_P(PSTR("                var colorWipeBlue = 0\n"));
  restServer.sendContent_P(PSTR("                var colorWipeDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $('#colorWipeSelectButton').colorPicker({\n"));
  restServer.sendContent_P(PSTR("                    customBG: '#222',\n"));
  restServer.sendContent_P(PSTR("                    margin: '4px -2px 0',\n"));
  restServer.sendContent_P(PSTR("                    doRender: 'div div',\n"));
  restServer.sendContent_P(PSTR("                    preventFocus: true,\n"));
  restServer.sendContent_P(PSTR("                    animationSpeed: 150,\n"));
  restServer.sendContent_P(PSTR("                    forceAlpha : false,\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    // demo on how to make plugins... mobile support plugin\n"));
  restServer.sendContent_P(PSTR("                    buildCallback: function($elm) {\n"));
  restServer.sendContent_P(PSTR("                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"));
  restServer.sendContent_P(PSTR("                    },\n"));
  restServer.sendContent_P(PSTR("                    cssAddon:\n"));
  restServer.sendContent_P(PSTR("                        '.cp-disp {padding:10px; margin-bottom:6px; font-size:19px; height:20px; line-height:20px}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-slider {width:200px; height:200px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-slider {height:200px; width:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha {height:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    renderCallback: function($elm, toggled) {\n"));
  restServer.sendContent_P(PSTR("                        var colors = this.color.colors;\n"));
  restServer.sendContent_P(PSTR("                        onColorWipeButtonEvent(Math.round(colors.rgb.r*255), Math.round(colors.rgb.g*255), Math.round(colors.rgb.b*255))\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        this.$colorPatch.css({\n"));
  restServer.sendContent_P(PSTR("                            backgroundColor: '#' + colors.HEX,\n"));
  restServer.sendContent_P(PSTR("                            color: colors.RGBLuminance > 0.22 ? '#222' : '#ddd'\n"));
  restServer.sendContent_P(PSTR("                        }).text(this.color.toString($elm._colorMode)); // $elm.val();\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                })\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onColorWipeButtonEvent(red, green, blue) {\n"));
  restServer.sendContent_P(PSTR("                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"));
  restServer.sendContent_P(PSTR("                        currentRed = red\n"));
  restServer.sendContent_P(PSTR("                        currentGreen = green\n"));
  restServer.sendContent_P(PSTR("                        currentBlue = blue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        msg = {\n"));
  restServer.sendContent_P(PSTR("                            \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                            \"Mode\" : \"Color Wipe\", \n"));
  restServer.sendContent_P(PSTR("                            \"Color Wipe\": {\n"));
  restServer.sendContent_P(PSTR("                                \"Red\": red,\n"));
  restServer.sendContent_P(PSTR("                                \"Green\": green,\n"));
  restServer.sendContent_P(PSTR("                                \"Blue\": blue\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        if (Date.now() - colorWipeDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                            colorWipeDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                            sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    if (msg != colorWipeLastMessage && Date.now() - colorWipeDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        colorWipeDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        colorWipeLastMessage = msg\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            </script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"Confetti\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Confetti Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>Confetti will flash random colors to emulate confetti.</p>\n"));
  //restServer.sendContent_P(PSTR("            <div class=\"row my-3\">\n"));
  //restServer.sendContent_P(PSTR("                <input id=\"confettiSelectButton\" class=\"color col mb-2 mx-2 btn btn-lg btn-outline-light\" value=\"rgb(0,0,0)\"></input>\n"));
  //restServer.sendContent_P(PSTR("            </div>\n"));
  //restServer.sendContent_P(PSTR("            <div>\n"));
  //restServer.sendContent_P(PSTR("                <label for=\"confettiSpeed\">Confetti Speed: <span id=\"confettiSpeedLabel\">5</span></label>\n"));
  //restServer.sendContent_P(PSTR("                <input id=\"confettiSpeed\" type=\"range\" min=\"0\" max=\"10\" step=\"1\" value=\"5\" class=\"form-control-range\">\n"));
  //restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                var confettiLastMessage = \"\"\n"));
  restServer.sendContent_P(PSTR("                var confettiRed = 0;\n"));
  restServer.sendContent_P(PSTR("                var confettiGreen = 0;\n"));
  restServer.sendContent_P(PSTR("                var confettiBlue = 0;\n"));
  restServer.sendContent_P(PSTR("                var confettiDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $('#confettiSelectButton').colorPicker({\n"));
  restServer.sendContent_P(PSTR("                    customBG: '#222',\n"));
  restServer.sendContent_P(PSTR("                    margin: '4px -2px 0',\n"));
  restServer.sendContent_P(PSTR("                    doRender: 'div div',\n"));
  restServer.sendContent_P(PSTR("                    preventFocus: true,\n"));
  restServer.sendContent_P(PSTR("                    animationSpeed: 150,\n"));
  restServer.sendContent_P(PSTR("                    forceAlpha : false,\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    // demo on how to make plugins... mobile support plugin\n"));
  restServer.sendContent_P(PSTR("                    buildCallback: function($elm) {\n"));
  restServer.sendContent_P(PSTR("                        this.$colorPatch = $elm.prepend('<div class=\"cp-disp\">').find('.cp-disp');\n"));
  restServer.sendContent_P(PSTR("                    },\n"));
  restServer.sendContent_P(PSTR("                    cssAddon:\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-slider {width:200px; height:200px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-xy-cursor {width:16px; height:16px; border-width:2px; margin:-8px}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-slider {height:200px; width:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-z-cursor {border-width:8px; margin-top:-8px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha {height:40px;}' +\n"));
  restServer.sendContent_P(PSTR("                        '.cp-alpha-cursor {border-width:8px; margin-left:-8px;}',\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    renderCallback: function($elm, toggled) {\n"));
  restServer.sendContent_P(PSTR("                        var colors = this.color.colors;\n"));
  restServer.sendContent_P(PSTR("                        onConfettiButtonEvent(Math.round(colors.rgb.r*255), Math.round(colors.rgb.g*255), Math.round(colors.rgb.b*255))\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                })\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onConfettiEvent() {\n"));
  restServer.sendContent_P(PSTR("                    let currentSpeedValue = parseFloat($(\"#confettiSpeed\").val())\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    $(\"#confettiSpeedLabel\").html(currentSpeedValue)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                        \"Mode\" : \"Confetti\",\n"));
  restServer.sendContent_P(PSTR("                        \"Confetti\": { \n"));
  restServer.sendContent_P(PSTR("                            \"Speed\": currentSpeedValue,\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (msg != confettiLastMessage && Date.now() - confettiDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        confettiDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        confettiLastMessage = msg\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onConfettiButtonEvent(red, green, blue) {\n"));
  restServer.sendContent_P(PSTR("                    if (currentRed != red || currentGreen != green || currentBlue != blue) {\n"));
  restServer.sendContent_P(PSTR("                        currentRed = red\n"));
  restServer.sendContent_P(PSTR("                        currentGreen = green\n"));
  restServer.sendContent_P(PSTR("                        currentBlue = blue\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                        msg = {\n"));
  restServer.sendContent_P(PSTR("                                \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                                \"Mode\" : \"Confetti\",\n"));
  restServer.sendContent_P(PSTR("                                \"Confetti\": {\n"));
  restServer.sendContent_P(PSTR("                                    \"Red\": red,\n"));
  restServer.sendContent_P(PSTR("                                    \"Green\": green,\n"));
  restServer.sendContent_P(PSTR("                                    \"Blue\": blue\n"));
  restServer.sendContent_P(PSTR("                            }\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                        if (Date.now() - confettiDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                            confettiDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                            sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                    if (msg != confettiLastMessage && Date.now() - confettiDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        confettiDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        confettiLastMessage = msg\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            </Script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"Visualiser\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Visualiser Mode</h2>\n"));
  restServer.sendContent_P(PSTR("            <p> Here you can set the mode to Visualiser. This mode does an FFT on the ADC of the ESP8266 and maps the frequencies\n"));
  restServer.sendContent_P(PSTR("                to the number of top and bottom LED's. To use this mode, an input source must be present on the ADC such as an amplified mic \n"));
  restServer.sendContent_P(PSTR("                or an input from a music source such as a Chromecast. \n"));
  restServer.sendContent_P(PSTR("            </p>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"visualiserPeriod\"><b>Frequency Range</b>: <span id=\"visualiserPeriodLabel\">2000</span>Hz</label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"visualiserPeriod\" type=\"range\" min=\"100\" max=\"2000\" step=\"50\" value=\"250\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"visualiserMinThreshold\"><b>Minimum Threshold</b>: <span id=\"visualiserMinThresholdLabel\">100</span></label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"visualiserMinThreshold\" type=\"range\" min=\"0\" max=\"300\" step=\"10\" value=\"100\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"visualiserMaxThreshold\"><b>Maximum Threshold</b>: <span id=\"visualiserMaxThresholdLabel\">750</span></label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"visualiserMaxThreshold\" type=\"range\" min=\"400\" max=\"3000\" step=\"50\" value=\"750\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"visualiserFadeUp\"><b>Fade Up Delay</b>: <span id=\"visualiserFadeUpLabel\">32</span></label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"visualiserFadeUp\" type=\"range\" min=\"0\" max=\"255\" step=\"1\" value=\"32\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"visualiserFadeDown\"><b>Fade Down Delay</b>: <span id=\"visualiserFadeDownLabel\">32</span></label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"visualiserFadeDown\" type=\"range\" min=\"0\" max=\"255\" step=\"1\" value=\"32\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <div>\n"));
  restServer.sendContent_P(PSTR("                <label for=\"visualiserHueOffset\"><b>Hue Offset</b>: <span id=\"visualiserHueOffsetLabel\">170</span></label>\n"));
  restServer.sendContent_P(PSTR("                <input id=\"visualiserHueOffset\" type=\"range\" min=\"0\" max=\"359\" step=\"1\" value=\"170\" class=\"form-control-range\">\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("            <h6 class=\"pt-4\">Variable Description</h6>\n"));
  restServer.sendContent_P(PSTR("            <ul>\n"));
  restServer.sendContent_P(PSTR("                <li><b>Frequency Range</b> - The displayed frequency spectrum from left to right starting from 0Hz</li>\n"));
  restServer.sendContent_P(PSTR("                <li><b>Minimum Threshold</b> - The minimum value of the FFT calculations to map to the zero brightness of the LED's, useful to remove noise</li>\n"));
  restServer.sendContent_P(PSTR("                <li><b>Maximum Threshold</b> - The maximum ceiling value value of the FFT to map to max brightness of the LED's</li>\n"));
  restServer.sendContent_P(PSTR("                <li><b>Fade Up Delay</b> - A multiplier to control the speed of animation when setting the light to new brightness</li>\n"));
  restServer.sendContent_P(PSTR("                <li><b>Fade Down Delay</b> - A multiplier to control how fast the LED's fade out when no new brightness has been set</li>\n"));
  restServer.sendContent_P(PSTR("                <li><b>Hue Offset</b> - The offset hue value from 0 for the start of the rainbow</li>\n"));
  restServer.sendContent_P(PSTR("            </ul>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                var visualiserDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                var lastVisualiserMessaeg = \"\"\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserPeriod\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserPeriod\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserMinThreshold\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserMinThreshold\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserMaxThreshold\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserMaxThreshold\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserFadeUp\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserFadeUp\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserFadeDown\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserFadeDown\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserHueOffset\").on(\"input\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#visualiserHueOffset\").on(\"change\", function () {\n"));
  restServer.sendContent_P(PSTR("                    onVisualiserEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onVisualiserEvent() {\n"));
  restServer.sendContent_P(PSTR("                    let currentPeriod           = parseInt($(\"#visualiserPeriod\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    let currentMinThreshold     = parseInt($(\"#visualiserMinThreshold\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    let currentMaxThreshold     = parseInt($(\"#visualiserMaxThreshold\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    let currentFadeUp           = parseInt($(\"#visualiserFadeUp\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    let currentFadeDown         = parseInt($(\"#visualiserFadeDown\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("                    let currentHueOffset        = parseInt($(\"#visualiserHueOffset\").val(), 10)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    $(\"#visualiserPeriodLabel\").html(Math.round(1000000/currentPeriod/2))\n"));
  restServer.sendContent_P(PSTR("                    $(\"#visualiserMinThresholdLabel\").html(currentMinThreshold)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#visualiserMaxThresholdLabel\").html(currentMaxThreshold)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#visualiserFadeUpLabel\").html(currentFadeUp)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#visualiserFadeDownLabel\").html(currentFadeDown)\n"));
  restServer.sendContent_P(PSTR("                    $(\"#visualiserHueOffsetLabel\").html(currentHueOffset)\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"State\" : true,\n"));
  restServer.sendContent_P(PSTR("                        \"Mode\" : \"Visualiser\",\n"));
  restServer.sendContent_P(PSTR("                        \"Visualiser\" : {\n"));
  restServer.sendContent_P(PSTR("                            \"Period\" : currentPeriod,\n"));
  restServer.sendContent_P(PSTR("                            \"MinThreshold\" : currentMinThreshold,\n"));
  restServer.sendContent_P(PSTR("                            \"MaxThreshold\" : currentMaxThreshold,\n"));
  restServer.sendContent_P(PSTR("                            \"FadeUp\" : currentFadeUp,\n"));
  restServer.sendContent_P(PSTR("                            \"FadeDown\" : currentFadeDown,\n"));
  restServer.sendContent_P(PSTR("                            \"HueOffset\" : Math.round(currentHueOffset/360*255)\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (msg != lastVisualiserMessaeg && Date.now() - visualiserDebunce > 50) {\n"));
  restServer.sendContent_P(PSTR("                        lastVisualiserMessaeg = msg\n"));
  restServer.sendContent_P(PSTR("                        visualiserDebunce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            </script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("        <div id=\"WfiConfig\" class=\"container pb-5 tab-pane fade\">\n"));
  restServer.sendContent_P(PSTR("            <h2>Wifi Configuration</h2>\n"));
  restServer.sendContent_P(PSTR("            <p>This is the WiFi configuration page. Here you can choose the wifi access point to connect to or go back\n"));
  restServer.sendContent_P(PSTR("                to access point mode. This will be remebered through reboot for you so you wont have to set this up\n"));
  restServer.sendContent_P(PSTR("                every time. <b>Please allow a few seconds for this page to update the table.</b> </p>\n"));
  restServer.sendContent_P(PSTR("            <table class=\"table table-hover\">\n"));
  restServer.sendContent_P(PSTR("                <thead id=\"wifiTableHead\">\n"));
  restServer.sendContent_P(PSTR("                    <tr>\n"));
  restServer.sendContent_P(PSTR("                        <th>SSID</th>\n"));
  restServer.sendContent_P(PSTR("                        <th>RSSI</th>\n"));
  restServer.sendContent_P(PSTR("                        <th>BSSID</th>\n"));
  restServer.sendContent_P(PSTR("                        <th>Channel</th>\n"));
  restServer.sendContent_P(PSTR("                        <th>Encrypted</th>\n"));
  restServer.sendContent_P(PSTR("                    </tr>\n"));
  restServer.sendContent_P(PSTR("                </thead>\n"));
  restServer.sendContent_P(PSTR("                <tbody id=\"wifiTableBody\">\n"));
  restServer.sendContent_P(PSTR("                </tbody>\n"));
  restServer.sendContent_P(PSTR("            </table>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            <button id=\"rescanButton\" class=\"col mb-2 mx-2 btn btn-lg btn-outline-light\">Rescan</button>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            <div id=\"wifiConfigForm\">\n"));
  restServer.sendContent_P(PSTR("                <div class=\"form-group\">\n"));
  restServer.sendContent_P(PSTR("                    <label for=\"SSIDInput\">SSID</label>\n"));
  restServer.sendContent_P(PSTR("                    <input id=\"SSIDInput\" class=\"form-control\" placeholder=\"SSID\" type=\"text\">\n"));
  restServer.sendContent_P(PSTR("                </div>\n"));
  restServer.sendContent_P(PSTR("                <div class=\"form-group\">\n"));
  restServer.sendContent_P(PSTR("                    <label for=\"PassInput\">Password</label>\n"));
  restServer.sendContent_P(PSTR("                    <input id=\"PassInput\" class=\"form-control\" placeholder=\"Password\" type=\"text\">\n"));
  restServer.sendContent_P(PSTR("                </div>\n"));
  restServer.sendContent_P(PSTR("                <button id=\"wifiConfigSubmitButton\" type=\"submit\" class=\"btn btn-lg btn-outline-light\">Submit</button>\n"));
  restServer.sendContent_P(PSTR("            </div>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("            <script>\n"));
  restServer.sendContent_P(PSTR("                wifiDebounce = Date.now()\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                $(\"#rescanButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onRescanWifiEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("                $(\"#wifiConfigSubmitButton\").click(function () {\n"));
  restServer.sendContent_P(PSTR("                    onSubmitWifiEvent()\n"));
  restServer.sendContent_P(PSTR("                });\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onRescanWifiEvent() {\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"Wifi\": {\n"));
  restServer.sendContent_P(PSTR("                            \"Rescan\": true\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (Date.now() - wifiDebounce > 2000) {\n"));
  restServer.sendContent_P(PSTR("                        wifiDebounce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                function onSubmitWifiEvent() {\n"));
  restServer.sendContent_P(PSTR("                    msg = {\n"));
  restServer.sendContent_P(PSTR("                        \"Wifi\": {\n"));
  restServer.sendContent_P(PSTR("                            \"SSID\": $(\"#SSIDInput\").val(),\n"));
  restServer.sendContent_P(PSTR("                            \"Password\": $(\"#PassInput\").val()\n"));
  restServer.sendContent_P(PSTR("                        }\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    $(\"#SSIDInput\").val(\"\")\n"));
  restServer.sendContent_P(PSTR("                    $(\"#PassInput\").val(\"\")\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("                    if (Date.now() - wifiDebounce > 2000) {\n"));
  restServer.sendContent_P(PSTR("                        wifiDebounce = Date.now()\n"));
  restServer.sendContent_P(PSTR("                        sendMessage(msg)\n"));
  restServer.sendContent_P(PSTR("                    }\n"));
  restServer.sendContent_P(PSTR("                }\n"));
  restServer.sendContent_P(PSTR("            </script>\n"));
  restServer.sendContent_P(PSTR("        </div>\n"));
  restServer.sendContent_P(PSTR("    </div>\n"));
  restServer.sendContent_P(PSTR("</body>\n"));
  restServer.sendContent_P(PSTR("\n"));
  restServer.sendContent_P(PSTR("</html>\n"));

  restServer.sendContent("");
  restServer.client().stop();

  // Scan for the networks in the area
  // scanForNetworks();
}

void scanForNetworks() {
  WiFi.scanNetworksAsync([&](int _networksFound) {
    updateWifiConfigTable(_networksFound);
  }, false);
}

void updateWifiConfigTable(int _numNetworks) {
  // Insert the RSSI into map if it is high enough (Map automatically sorts ascending)
  std::map<int32_t, int> orderedRSSI;
  for (int i = 0; i < _numNetworks; ++i) {
    if 		(i == _numNetworks)	Serial.println("[updateWifiConfigTable] - No Access Points Found");
    // else if	(WiFi.RSSI(i) < -90) Serial.println("[updateWifiConfigTable] - RSSI of " + WiFi.SSID(i) + " is too low at: " + String(WiFi.RSSI(i)));
    else {
      // Place access point reference into ordered map 
      // Serial.println("[updateWifiConfigTable] - Adding " + WiFi.SSID(i) + " to RSSI Map");
      orderedRSSI[WiFi.RSSI(i)] = i;
    }
  }
  
  // Loop through each of the found networks and put in HTML table
  String wsMessage = "{\"Wifi\":{\"ScanResults\":[";
  for(std::map<int32_t, int>::reverse_iterator  _orderedRSSI = orderedRSSI.rbegin(); _orderedRSSI != orderedRSSI.rend(); ++_orderedRSSI) {
    wsMessage += "{\"SSID\":\"" + WiFi.SSID(_orderedRSSI->second) + "\",";
    wsMessage += "\"BSSID\":\"" + WiFi.BSSIDstr(_orderedRSSI->second) + "\",";
    wsMessage += "\"CHANNEL\":\"" + String(WiFi.channel(_orderedRSSI->second)) + "\",";
    wsMessage += "\"RSSI\":\"" + String(WiFi.RSSI(_orderedRSSI->second)) + "\",";
    wsMessage += "\"ENCRYPT\":\"" + String((WiFi.encryptionType(_orderedRSSI->second) == ENC_TYPE_NONE) ? "No" : "Yes") + "\"";
    wsMessage += "}";
    wsMessage += _orderedRSSI != --orderedRSSI.rend() ? "," : "";
  }
  wsMessage += "]}}";

  // Send if the client is connected 
  if (webSocket.connectedClients(false)) webSocket.broadcastTXT(wsMessage);

  // Debug 
  Serial.println("[updateWifiConfigTable] - Number of Valid Networks Sent was: " + String(orderedRSSI.size()));
}

void otaInit() {
  OTAServer.setup(&restServer, "/update");
}
